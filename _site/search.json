[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ARC-LBB",
    "section": "",
    "text": "This is a website for ARC-LBB (Assessing the Risk of Crime in London Borough of Barnet) project, which was completed in part of the Data Science Accelerator programme by Office for National Statistics.\n\n\n\n\n\n\n“Cognitivie behaviour therapy (CBT) for individuals to prevent crimes has shown to be less effective in countries with higher level of socioeconomic inequality like UK compared to countries with lesser inequality like Canada.” - Crime Surveys User Conference (2024)\n\n\n\nARC-LBB project started with a question of how much can structural elements contribute to criminal incidence. Although crime at individual level appears to be an outcome of personal behaviour, identifying environmental factors can help inform the risk of crime at population level, akin to structural determinants in population health.\nSimilar efforts have been recognised in crime analytics. Metropolitan Police has started to investigate Risk Terrain Modelling, which aims to identify geographical factors that correlate to specific crime type of interest (Metropolitan Police 2023). Several works have been ongoing in the academia as well (Cichosz 2020, Shah et al 2021, Yunus & Loo 2023)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Data Sourcing\n\nPolice\nOpen Street Map\n\nData Processing\nEDA\nAutocorrelation\n\nGlobal\nLocal\n\nKriging\nPCA\nMultivariate Kriging\n\nModel Evaluation\n\nGeographically Weighted Regression\n\nModel Evaluation"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "EDA",
    "section": "",
    "text": "Code\n#--Install / load packages\nrm(list = ls())\npacman::p_load(sf, here, tmap, osmdata, tidyverse, data.table, rio, tidyverse, flextable, mapview, units, spdep, deldir, sp, rgeoda, leaflet, viridis, crosstalk, leaflet.extras, plotly)\n\n#--Import street-level crime data\ncrime &lt;- rio::import(here::here(\"3_output\", \"crime_2024-05-09.csv\")) |&gt;\n    dplyr::mutate(category = stringr::str_replace_all(category, \"-\", \" \")) |&gt;\n    sf::st_as_sf(coords = c(\"location.longitude\", \"location.latitude\"), crs = 4326, dim = \"XY\") \n    #from 2021-04 to 2024-03\n\n#--Import Barnet shapefile\nbnt_shp &lt;- sf::st_read(here(\"1_data\", \"9_geo\", \"bnt_lad.json\"), crs = 4326, quiet = TRUE) |&gt;\n  st_make_valid()\n\n#--Get bounding box \nbb &lt;- st_bbox(bnt_shp) \n\n#--Filter crime that intersects or is in within Barnet file\n#crime_bnt &lt;- crime[which(st_covers(bnt_shp, crime, sparse = FALSE)),]\ncrime_bnt &lt;- crime[which(st_intersects(bnt_shp, crime, sparse = FALSE)),]\n\n#--Amend date column\ncrime_bnt$date &lt;- as.Date(paste0(crime_bnt$month, \"-01\"))\n\n#--Create shared_data\nshared_data &lt;- SharedData$new(crime_bnt)"
  },
  {
    "objectID": "eda.html#set-up",
    "href": "eda.html#set-up",
    "title": "EDA",
    "section": "",
    "text": "Code\n#--Install / load packages\nrm(list = ls())\npacman::p_load(sf, here, tmap, osmdata, tidyverse, data.table, rio, tidyverse, flextable, mapview, units, spdep, deldir, sp, rgeoda, leaflet, viridis, crosstalk, leaflet.extras, plotly)\n\n#--Import street-level crime data\ncrime &lt;- rio::import(here::here(\"3_output\", \"crime_2024-05-09.csv\")) |&gt;\n    dplyr::mutate(category = stringr::str_replace_all(category, \"-\", \" \")) |&gt;\n    sf::st_as_sf(coords = c(\"location.longitude\", \"location.latitude\"), crs = 4326, dim = \"XY\") \n    #from 2021-04 to 2024-03\n\n#--Import Barnet shapefile\nbnt_shp &lt;- sf::st_read(here(\"1_data\", \"9_geo\", \"bnt_lad.json\"), crs = 4326, quiet = TRUE) |&gt;\n  st_make_valid()\n\n#--Get bounding box \nbb &lt;- st_bbox(bnt_shp) \n\n#--Filter crime that intersects or is in within Barnet file\n#crime_bnt &lt;- crime[which(st_covers(bnt_shp, crime, sparse = FALSE)),]\ncrime_bnt &lt;- crime[which(st_intersects(bnt_shp, crime, sparse = FALSE)),]\n\n#--Amend date column\ncrime_bnt$date &lt;- as.Date(paste0(crime_bnt$month, \"-01\"))\n\n#--Create shared_data\nshared_data &lt;- SharedData$new(crime_bnt)"
  },
  {
    "objectID": "eda.html#exploratory-map",
    "href": "eda.html#exploratory-map",
    "title": "EDA",
    "section": "Exploratory Map",
    "text": "Exploratory Map\n\n\n\n\n\n\nDate\n\n\n\n\n\n\nCategory"
  },
  {
    "objectID": "eda.html#spatio-temporal-distribution-of-crimes-by-category",
    "href": "eda.html#spatio-temporal-distribution-of-crimes-by-category",
    "title": "EDA",
    "section": "Spatio-Temporal Distribution of Crimes by Category",
    "text": "Spatio-Temporal Distribution of Crimes by Category\n\nMap by Category\n\n\nCode\n#--Assign colour palette\nn_pal &lt;- length(unique(crime_bnt$category))\ncrime_pal &lt;- leaflet::colorFactor(turbo(n_pal), crime_bnt$category)\n\n#--Create filters\nmonth_slider &lt;- crosstalk::filter_slider(\"date\", \"Date\", shared_data, ~date, width = \"100%\")\ncategory_checkbox &lt;- crosstalk::filter_checkbox(\"category\", \"Category\", shared_data, ~category)\n\n#--Create map\nm_eda &lt;- leaflet(shared_data) |&gt;\n  leaflet::addProviderTiles(\"CartoDB.Positron\")|&gt;\n  leaflet::addCircleMarkers(color = ~crime_pal(category), radius = 2) |&gt;\n  leaflet::addLegend(\"bottomright\", pal = crime_pal, values = ~category, title = \"Category\")\n\n#--Pull everything together\ncrosstalk::bscols(\n  widths = c(12, 3, 9),\n  month_slider,\n  category_checkbox,\n  m_eda\n)\n\n\n\n\n\n\nDate\n\n\n\n\n\n\nCategory\n\n\n\n\nanti social behaviour\n\n\n\n\n\nbicycle theft\n\n\n\n\n\nburglary\n\n\n\n\n\ncriminal damage arson\n\n\n\n\n\ndrugs\n\n\n\n\n\nother crime\n\n\n\n\n\nother theft\n\n\n\n\n\npossession of weapons\n\n\n\n\n\npublic order\n\n\n\n\n\nrobbery\n\n\n\n\n\nshoplifting\n\n\n\n\n\ntheft from the person\n\n\n\n\n\nvehicle crime\n\n\n\n\n\nviolent crime\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrend by Category\n\n\nCode\n#--Create timeseries data by category\nct_crime &lt;- crime_bnt |&gt;\n    st_drop_geometry() |&gt;\n    group_by(category, date) |&gt;\n    tally() |&gt;\n    arrange(desc(n))\n\n#--Create shared_data\nshared_data_ct &lt;- SharedData$new(ct_crime)\n\n#--Create filter\nmonth_slider_ct &lt;- crosstalk::filter_slider(\"date\", \"Date\", shared_data_ct, ~date, step = 1, width = \"100%\")\n\n#--Trend plot\npl_trend &lt;- plotly::plot_ly(shared_data_ct, x = ~date, y = ~n, color = ~category, colors = viridis_pal(option = \"H\")(14)) |&gt;\n  plotly::add_lines() |&gt;\n  plotly::layout(xaxis = list(title = \"\"),\n                 yaxis = list(title = \"Number of Crimes\\n\"))\n\n#--Pull everything together\ncrosstalk::bscols(\n  widths = c(12, 12),\n  month_slider_ct,\n  pl_trend\n)\n\n\n\n\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverall Frequency\n\nIn the last three years\n\n\nCode\n#--Create count data by category\nct_crime2 &lt;- crime_bnt |&gt;\n    st_drop_geometry() |&gt;\n    group_by(category) |&gt;\n    tally() |&gt;\n    arrange(desc(n)) \n\n#--Frequency plot\npl_freq &lt;- plot_ly(ct_crime2, x = ~stats::reorder(category, n, decreasing = TRUE), y = ~n, color = ~category, colors = viridis_pal(option = \"H\")(14)) |&gt;\n  plotly::add_bars()|&gt;\n  plotly::layout(xaxis = list(title = \"\"),\n                 yaxis = list(title = \"Number of Crimes\\n\"))\n\npl_freq\n\n\n\n\n\n\n\n\nIn the last 12 months\n\n\nCode\n#--Create count data by category in the last 12 months\nct_crime3 &lt;- crime_bnt |&gt;\n    st_drop_geometry() |&gt;\n    filter(date &gt;= ymd(\"2023-04-01\")) |&gt;\n    group_by(category) |&gt;\n    tally() |&gt;\n    arrange(desc(n)) \n\n#--Frequency plot\npl_freq2 &lt;- plot_ly(ct_crime3, x = ~stats::reorder(category, n, decreasing = TRUE), y = ~n, color = ~category, colors = viridis_pal(option = \"H\")(14)) |&gt;\n  plotly::add_bars()|&gt;\n  plotly::layout(xaxis = list(title = \"\"),\n                 yaxis = list(title = \"Number of Crimes\\n\"))\n\npl_freq2"
  },
  {
    "objectID": "limitation.html",
    "href": "limitation.html",
    "title": "Limitation",
    "section": "",
    "text": "Data Quality\n\nBiased patterns in patrol\nTendency to be more crimes near police station"
  },
  {
    "objectID": "kriging.html",
    "href": "kriging.html",
    "title": "Kriging",
    "section": "",
    "text": "Kriging is an intriguing model for spatial interpolation. We can estimate the number of crimes with a limited set of data points we have by using kriging. Kriging essentially models the spatial relationship between points and penalises points that are farther away from each other, giving less weight, as shown in the equation below.1\n\n\\hat Z(S_0) = \\Sigma_{i = 1}^{N}\\lambda_iZ(S_i)\n where\n\nZ(S_i) = the measured value at the ith location\n\\lambda_i = weight for the measured value at the ith location\ns_0 = the prediction location\nN = the number of measured values\n\nUnlike simpler methods, such as Inverse Distance Weighted Interpolation or Linear Regression, kriging interpolates based on the spatial distribution of empirical observations, that being the data points we have, instead of assuming a theoretical distribution. The interpolation ultimately results in a map of prediction surface.\nKrigining analysis is broadly in three parts.\n\nPre-process data\nCreate variogram\nMake a prediction\n\n\n\n\nVariogram, also known as semi-variogram, is a diagram of semi-variance, which is a half of mean squared difference in the values of paired locations. At distance h between location i and location j, Semivariogram(distance_h) = 0.5 * average(value_i - value_j)^2). For each pair of points, semi-variance is plotted against distance between points. Hence, variogram shows the covariance between each pair of points.\n\n\n\n\n\nAfter building variogram, distribution that best fits the variogram is selected, as shown below. While it is possible to specify a distribution of interest. it is also possible for a software to choose the best-fit model. Kriging then uses the fitted variogram values to make predictions at unsampled locations."
  },
  {
    "objectID": "kriging.html#introduction",
    "href": "kriging.html#introduction",
    "title": "Kriging",
    "section": "",
    "text": "Kriging is an intriguing model for spatial interpolation. We can estimate the number of crimes with a limited set of data points we have by using kriging. Kriging essentially models the spatial relationship between points and penalises points that are farther away from each other, giving less weight, as shown in the equation below.1\n\n\\hat Z(S_0) = \\Sigma_{i = 1}^{N}\\lambda_iZ(S_i)\n where\n\nZ(S_i) = the measured value at the ith location\n\\lambda_i = weight for the measured value at the ith location\ns_0 = the prediction location\nN = the number of measured values\n\nUnlike simpler methods, such as Inverse Distance Weighted Interpolation or Linear Regression, kriging interpolates based on the spatial distribution of empirical observations, that being the data points we have, instead of assuming a theoretical distribution. The interpolation ultimately results in a map of prediction surface.\nKrigining analysis is broadly in three parts.\n\nPre-process data\nCreate variogram\nMake a prediction\n\n\n\n\nVariogram, also known as semi-variogram, is a diagram of semi-variance, which is a half of mean squared difference in the values of paired locations. At distance h between location i and location j, Semivariogram(distance_h) = 0.5 * average(value_i - value_j)^2). For each pair of points, semi-variance is plotted against distance between points. Hence, variogram shows the covariance between each pair of points.\n\n\n\n\n\nAfter building variogram, distribution that best fits the variogram is selected, as shown below. While it is possible to specify a distribution of interest. it is also possible for a software to choose the best-fit model. Kriging then uses the fitted variogram values to make predictions at unsampled locations."
  },
  {
    "objectID": "kriging.html#pre-process-data",
    "href": "kriging.html#pre-process-data",
    "title": "Kriging",
    "section": "Pre-Process Data",
    "text": "Pre-Process Data\n\nSet Up\nASB (anti-social behaviour) has shown a positive auto-correlation. Therefore, we will continue working on ASB.\n\n\nCode\n#--Install / load packages\npacman::p_load(sp, sf, data.table, rio, here, leaflet, gstat, tidyverse, Metrics, scales, corrr, ggcorrplot, FactoMineR, factoextra, corrplot)\n\n#--Import street-level asb data\nasb &lt;- import(here(\"3_output\", \"asb_with_nearest_distances.csv\"))\n\n#--Calculate count of crimes per location coordinate\nasb_count &lt;- asb |&gt; \n    group_by(location.latitude, location.longitude) |&gt;\n    count() |&gt; \n    ungroup() |&gt; \n    inner_join(asb, by = c('location.latitude', 'location.longitude')) |&gt; \n    distinct(location.latitude, location.longitude, .keep_all = TRUE) |&gt;\n    group_by(location.latitude, location.longitude) |&gt;\n    mutate(location_id = cur_group_id()) |&gt;\n    ungroup()\n\n#--Rename columns \nnames(asb_count)[grepl('longitude', names(asb_count))] &lt;- 'x' \nnames(asb_count)[grepl('latitude', names(asb_count))] &lt;- 'y' \n\n#--Convert dataframe to sf object and reproject to OSGB36\nasb_count_sf &lt;- asb_count |&gt; \n    st_as_sf(coords = c('x', 'y'), crs = 4326) \n\n#--Get coordinates\nasb_count_sf &lt;- asb_count_sf |&gt;\n    mutate(x = st_coordinates(asb_count_sf)[, 1],\n           y = st_coordinates(asb_count_sf)[, 2])\n\n#--Change the sf back to df\nasb_count &lt;- st_drop_geometry(asb_count_sf)\n\n\nThe very first step of kriging analysis is to pre-proecess the data into a count data by location pairs. At every unique coordinate of longitude and latitude (or x and y), the number of anti-social behaviour (ASB) was counted.\n\n\nSplit Data into Test & Train Sets\n\n\nCode\n#--Create random indices\ntotal_rows &lt;- nrow(asb_count)\nsample_size &lt;- round(total_rows * 0.75)\n\nset.seed(1234) # for reproducibility\nrandom_indices &lt;- sample(1:total_rows, sample_size, replace = FALSE)\n\n#--Create the test set using the random indices\ntrain_asb &lt;- asb_count |&gt; filter(location_id %in% random_indices)\n\n# Create the training set by excluding the indices used for the test set\ntest_asb &lt;-  asb_count |&gt; filter(!location_id %in% random_indices)\n\n# Convert train and test sets to sp objects\ncoordinates(train_asb) &lt;- c(\"x\", \"y\")\nproj4string(train_asb) &lt;- CRS(\"+proj=longlat +datum=WGS84\")\ncoordinates(test_asb) &lt;- c(\"x\", \"y\")\nproj4string(test_asb) &lt;- CRS(\"+proj=longlat +datum=WGS84\")\n\n\nThe count of ASB data at each unique location was randomly split into test and train sets at a ratio of 75% and 25% in order to evaluate the kriging model."
  },
  {
    "objectID": "kriging.html#create-variogram",
    "href": "kriging.html#create-variogram",
    "title": "Kriging",
    "section": "Create Variogram",
    "text": "Create Variogram\n\n\nCode\n#--Create variogram\nvgm &lt;- variogram(log(n) ~ x + y, train_asb, width=0.1)\n\n#--Create the fitted curve line\nfit &lt;- fit.variogram(vgm, vgm(c(\"Gau\", \"Sph\", \"Mat\", \"Exp\")), fit.kappa = TRUE)\n\n#--Plot the curve function\nplot(vgm, main = \"Variogram\")\n\n\n\n\n\n\n\n\n\nCode\nplot(fit, main = \"Variogram Model Fit\", cutoff = max(vgm$dist))\n\n\n\n\n\n\n\n\n\nCode\n # When the curve plateaus, the point pairs are no longer spatially correlated"
  },
  {
    "objectID": "kriging.html#create-grid",
    "href": "kriging.html#create-grid",
    "title": "Kriging",
    "section": "Create Grid",
    "text": "Create Grid\nWe need to create a surface onto which kriging model can make prediction. In other words, we need all possible points within the boundary of Barnet, which we can achieve by creating very small grid cells of equal size and extract their centroid points.\n\n\nCode\n#--Import Barnet shapefile\nbnt_shp &lt;- sf::st_read(here(\"1_data\", \"9_geo\", \"bnt_lad.json\"), crs = 4326) |&gt; \n    st_make_valid() |&gt;\n    st_transform(27700) # reprojects onto British National Grid, of which the unit is meter\n#&gt; Reading layer `OS - BoundaryLine - 2022Authorities - Barnet' from data source \n#&gt;   `C:\\Users\\Hannah.Chang\\OneDrive - London Borough of Barnet\\General - I&I Hub\\02. Project Documentation\\07. Standard Projects\\ARC_LBB Website\\arc_lbb_website\\1_data\\9_geo\\bnt_lad.json' \n#&gt;   using driver `TopoJSON'\n#&gt; Simple feature collection with 1 feature and 17 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -0.3055738 ymin: 51.55528 xmax: -0.1291338 ymax: 51.67021\n#&gt; Geodetic CRS:  WGS 84\n\n#--Make grid of 100m x 100m\ngrid &lt;- bnt_shp |&gt; \n    st_make_grid(cellsize = units::as_units(100, \"m\"), what = \"centers\") |&gt;\n    st_as_sf(crs = 27700)\n\n#--Filter grid points to include only those within the Barnet polygon\nresult &lt;- st_within(grid, bnt_shp) |&gt;\n    as.data.frame()\n\ngrid_bnt &lt;- grid |&gt; \n    mutate(row.id = 1:nrow(grid)) |&gt; \n    left_join(result) |&gt; \n    filter(!is.na(col.id))\n\n#--Reproject to WGS84\ngrid_bnt_wgs84 &lt;- grid_bnt |&gt;\n    st_transform(4326) |&gt;\n    rename(geometry = x)\n\n#--Add longtidue and latitude \ngrid_bnt_wgs84 &lt;- grid_bnt_wgs84 |&gt;\n    mutate(x = st_coordinates(grid_bnt_wgs84)[, 1],\n           y = st_coordinates(grid_bnt_wgs84)[, 2]) \n\n#--Check\nggplot() +\n    geom_sf(data = grid_bnt, alpha = 0.3, colour = \"#00AFA9\") +\n    geom_sf(data = bnt_shp, alpha = 0, lwd = 2, colour = \"black\") +\n    ggtitle(\"All the points in the grids within Barnet boundary\") +\n    theme_minimal()"
  },
  {
    "objectID": "kriging.html#footnotes",
    "href": "kriging.html#footnotes",
    "title": "Kriging",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nArcGIS - How Kriging works: https://pro.arcgis.com/en/pro-app/latest/tool-reference/3d-analyst/how-kriging-works.htm↩︎"
  },
  {
    "objectID": "2_script/pca_test_train_ex.html",
    "href": "2_script/pca_test_train_ex.html",
    "title": "ARC-LBB",
    "section": "",
    "text": "import numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\n\n\n# Load iris dataset as an example\niris = load_iris()\nX = iris.data\ny = iris.target\n\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\n# Standardize the data (important for PCA)\nscaler = StandardScaler()\nX_train_std = scaler.fit_transform(X_train)\nX_test_std = scaler.transform(X_test)\n\n\n# Apply PCA\npca = PCA()\nX_train_pca = pca.fit_transform(X_train_std)\n\n\n# Calculate the cumulative explained variance\ncumulative_variance_ratio = np.cumsum(pca.explained_variance_ratio_)\n\ncumulative_variance_ratio\n\narray([0.72551423, 0.95552345, 0.99513118, 1.        ])\n\n\n\n# Determine the number of components to keep for 85% variance explained\nn_components = np.argmax(cumulative_variance_ratio &gt;= 0.85) + 1\n\n\n# Apply PCA with the selected number of components\npca = PCA(n_components=n_components)\nX_train_pca = pca.fit_transform(X_train_std)\nX_test_pca = pca.transform(X_test_std)\n\n\n# Display the results\nprint(\"Original Training Data Shape:\", X_train.shape)\nprint(\"Reduced Training Data Shape (PCA):\", X_train_pca.shape)\nprint(\"Number of Components Selected:\", n_components)\n\nOriginal Training Data Shape: (120, 4)\nReduced Training Data Shape (PCA): (120, 2)\nNumber of Components Selected: 2"
  },
  {
    "objectID": "0_ref/ref_for_lisa.html",
    "href": "0_ref/ref_for_lisa.html",
    "title": "ARC-LBB",
    "section": "",
    "text": "https://crd230.github.io/lab7.html"
  },
  {
    "objectID": "0_ref/osm_amenity_list.html",
    "href": "0_ref/osm_amenity_list.html",
    "title": "ARC-LBB",
    "section": "",
    "text": "List of values for the amenity key in OpenStreetMap:\n\nSustenance\n\nbar\nbiergarten\ncafe\nfast_food\nfood_court\nice_cream\npub\nrestaurant\n\n\n\nEducation\n\ncollege\ndancing_school\ndriving_school\nfirst_aid_school\nkindergarten\nlanguage_school\nlibrary\nsurf_school\ntoy_library\nresearch_institute\ntraining\nmusic_school\nschool\ntraffic_park\nuniversity\n\n\n\nTransportation\n\nbicycle_parking\nbicycle_repair_station\nbicycle_rental\nbicycle_wash\nboat_rental\nboat_sharing\nbus_station\ncar_rental\ncar_sharing\ncar_wash\ncompressed_air\nvehicle_inspection\ncharging_station\ndriver_training\nferry_terminal\nfuel\ngrit_bin\nmotorcycle_parking\nparking\nparking_entrance\nparking_space\ntaxi\nweighbridge\n\n\n\nFinancial\n\natm\npayment_terminal\nbank\nbureau_de_change\nmoney_transfer\npayment_centre\n\n\n\nHealthcare\n\nbaby_hatch\nclinic\ndentist\ndoctors\nhospital\nnursing_home\npharmacy\nsocial_facility\nveterinary\n\n\n\nEntertainment, Arts & Culture\n\narts_centre\nbrothel\ncasino\ncinema\ncommunity_centre\nconference_centre\nevents_venue\nexhibition_centre\nfountain\ngambling\nlove_hotel\nmusic_venue\nnightclub\nplanetarium\npublic_bookcase\nsocial_centre\nstage\nstripclub\nstudio\nswingerclub\ntheatre\n\n\n\nPublic Service\n\ncourthouse\nfire_station\npolice\npost_box\npost_depot\npost_office\nprison\nranger_station\ntownhall\n\n\n\nFacilities\n\nbbq\nbench\ndog_toilet\ndressing_room\ndrinking_water\ngive_box\nmailroom\nparcel_locker\nshelter\nshower\ntelephone\ntoilets\nwater_point\nwatering_place\n\n\n\nWaste Management\n\nsanitary_dump_station\nrecycling\nwaste_basket\nwaste_disposal\nwaste_transfer_station\n\n\n\nOthers\n\nanimal_boarding\nanimal_breeding\nanimal_shelter\nanimal_training\nbaking_oven\nclock\ncrematorium\ndive_centre\nfuneral_hall\ngrave_yard\nhunting_stand\ninternet_cafe\nkitchen\nkneipp_water_cure\nlounger\nmarketplace\nmonastery\nmortuary\nphoto_booth\nplace_of_mourning\nplace_of_worship\npublic_bath\npublic_building\nrefugee_site\nvending_machine\nuser_defined"
  },
  {
    "objectID": "2_script/crime_eda.html#crime-by-frequency",
    "href": "2_script/crime_eda.html#crime-by-frequency",
    "title": "Crime EDA",
    "section": "Crime by Frequency",
    "text": "Crime by Frequency\n\nMost Prevalent Crimes in Barnet All-Time\n\nAnti-social behaviour, violent crime, other theft, vehicle crime, and theft from the person were the five most prevalent crimes.\n\n\n\nMost Prevalent Crime in Barnet in the Last 12 Months\nInterestingly, in the last 12 months, the number of violent crimes exceeded that of anti-social behaviour. They were followed by vehicle crime, other theft and burglary."
  },
  {
    "objectID": "2_script/crime_eda.html#source-places",
    "href": "2_script/crime_eda.html#source-places",
    "title": "Crime EDA",
    "section": "Source Places",
    "text": "Source Places"
  },
  {
    "objectID": "2_script/crime_eda.html#count-the-number-of-crimes-and-places-within-each-grid",
    "href": "2_script/crime_eda.html#count-the-number-of-crimes-and-places-within-each-grid",
    "title": "Crime EDA",
    "section": "Count the Number of Crimes and Places within Each Grid",
    "text": "Count the Number of Crimes and Places within Each Grid\n\nCreate Grid\nUnless specified otherwise, cellsize in st_make_grid() is c(diff(st_bbox(x)[c(1, 3)]), diff(st_bbox(x)[c(2, 4)]))/n, where n = c(10, 10).\n\n\nSelect necessary columns\n\n\nCount the Number"
  },
  {
    "objectID": "2_script/crime_eda.html#spatial-autocorrelation",
    "href": "2_script/crime_eda.html#spatial-autocorrelation",
    "title": "Crime EDA",
    "section": "Spatial Autocorrelation",
    "text": "Spatial Autocorrelation\n\nSubset Crime Data\n\n\nCreate Distance-Based Weight\n\n\nCount the Number of Neighbouring Points of Each Crime Point\n\n\nGlobal Autocorrelation Test\n\n\nLocal Autocorrelation Test\n\n\nGeneric function for analysing SPAC\n\nApply to Crime\n\n\nApply to POI\n\n\n\nKriging"
  },
  {
    "objectID": "kriging.html#perform-kriging",
    "href": "kriging.html#perform-kriging",
    "title": "Kriging",
    "section": "Perform Kriging",
    "text": "Perform Kriging\n\n\nCode\n#--Define components of kriging model\npredictors &lt;- c(\"x\", \"y\")\nformula_string &lt;- paste(\"log(n)\", \"~\", paste(predictors, collapse = \" + \"))\nkrige_formula &lt;- as.formula(formula_string)\n\n# Perform kriging over the grid\nkriged_result_grid &lt;- krige(\n    formula = krige_formula,\n    locations = train_asb,\n    newdata = grid_bnt_wgs84,\n    model = fit,\n    maxdist = 10,\n    nmax = 50\n  ) \n#&gt; [using universal kriging]\n\n\n\n# Retrieve interpolated values for the grid\ngrid_fin &lt;- grid_bnt_wgs84 |&gt;\n    select(-contains(\"id\")) |&gt;\n    mutate(\n        krige_pred = exp(kriged_result_grid$var1.pred),\n        krige_var = exp(kriged_result_grid$var1.var)\n    ) |&gt;\n    mutate(\n        krige_pred_per_yr = krige_pred / 3\n    ) # dividing by 3 because the data spanned over 3 years\n\n# Visualise on static map\nggplot() +\n  geom_sf(data = grid_fin, aes(colour = krige_pred_per_yr)) +\n  scale_colour_gradient(low = \"green\", high = \"red\", name = \"Predicted Value\") +\n   geom_sf(data = bnt_shp, alpha = 0, lwd = 1.5, colour = \"black\") +\n  ggtitle(\"Hotspot Map for Anti-Social Behaviour Predicted by Kriging Model\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nCode\n\n# Visualise on interactive map\npal_asb &lt;- leaflet::colorNumeric(palette = 'RdYlGn', grid_fin$krige_pred_per_yr, rev = TRUE)\n\ngrid_fin$krige_popup &lt;- paste0(\"Predicted Number of ASB: \", as.character(round(grid_fin$krige_pred_per_yr, 0))) \n\nleaflet::leaflet(data = grid_fin) |&gt;\n    leaflet::addTiles() |&gt; \n    leaflet::addPolygons(\n        data = st_transform(bnt_shp, 4326),\n        fillOpacity = 0,\n        col = \"black\",\n        opacity = 0.8) |&gt;\n    leaflet::addCircles(\n    data = grid_fin,\n    color = ~pal_asb(krige_pred_per_yr),\n    popup = ~krige_popup,\n    radius = 10, # Adjust radius as needed\n    stroke = TRUE,\n    fillOpacity = 0.5\n  )  |&gt;\n  addLegend('bottomright',\n            pal =pal_asb,\n            values = ~krige_pred_per_yr,\n            title = 'Predicted Count of ASB',\n            opacity = 1)"
  },
  {
    "objectID": "kriging.html#evaluate-kriging-model",
    "href": "kriging.html#evaluate-kriging-model",
    "title": "Kriging",
    "section": "Evaluate Kriging Model",
    "text": "Evaluate Kriging Model\n\n\nCode\n# Perform kriging over the test set\nkriged_result_test &lt;- krige(\n    formula = krige_formula,\n    locations = train_asb,\n    newdata = test_asb,\n    model = fit,\n    maxdist = 10,\n    nmax = 50\n  ) |&gt;\n   st_as_sf()\n#&gt; [using universal kriging]\n\n# Retrieve interpolated values for the test set\nvalidation &lt;- test_asb |&gt;\n    st_as_sf() |&gt;\n    select(n) |&gt;\n    mutate(\n        krige_pred = exp(kriged_result_test$var1.pred),\n        krige_var = exp(kriged_result_test$var1.var)\n    )\n\n# Calculate RMSE to evaluate model performance\nrmse_asb &lt;- Metrics::rmse(\n    actual = validation$n/3,\n    predicted = validation$krige_pred/3)\n\nprint(paste0(\"Root mean square error of the kriging model is \", round(rmse_asb,2 )))\n#&gt; [1] \"Root mean square error of the kriging model is 3.98\"\n\nmin_asb &lt;- min(validation$krige_pred)/3\nmax_asb &lt;- max(validation$krige_pred)/3\n\nnrmse &lt;- rmse_asb / (max_asb - min_asb)\n\nprint(paste0(\"Normalised root mean square error of the kriging model is \", round(nrmse, 2)))\n#&gt; [1] \"Normalised root mean square error of the kriging model is 0.44\""
  },
  {
    "objectID": "autocorrelation.html#set-up",
    "href": "autocorrelation.html#set-up",
    "title": "Autocorrelation",
    "section": "Set Up",
    "text": "Set Up\n\nLoad packages and data\n\n\nCode\n#--Install / load packages\npacman::p_load(sf, here, tmap, osmdata, tidyverse, data.table, rio, flextable, mapview, units, knitr, spdep, deldir, sp, rgeoda)\n\n#--Import street-level crime data\ncrime &lt;- rio::import(here::here(\"3_output\", \"crime_2024-05-09.csv\")) |&gt;\n    dplyr::mutate(category = stringr::str_replace_all(category, \"-\", \" \")) |&gt;\n    sf::st_as_sf(coords = c(\"location.longitude\", \"location.latitude\"), crs = 4326, dim = \"XY\") \n    #from 2021-04 to 2024-03\n\n#--Import Barnet shapefile\nbnt_shp &lt;- sf::st_read(here(\"1_data\", \"9_geo\", \"bnt_lad.json\"), crs = 4326) |&gt;\n  st_make_valid()\n#&gt; Reading layer `OS - BoundaryLine - 2022Authorities - Barnet' from data source \n#&gt;   `C:\\Users\\Hannah.Chang\\OneDrive - London Borough of Barnet\\General - I&I Hub\\02. Project Documentation\\07. Standard Projects\\ARC_LBB Website\\arc_lbb_website\\1_data\\9_geo\\bnt_lad.json' \n#&gt;   using driver `TopoJSON'\n#&gt; Simple feature collection with 1 feature and 17 fields\n#&gt; Geometry type: POLYGON\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -0.3055738 ymin: 51.55528 xmax: -0.1291338 ymax: 51.67021\n#&gt; Geodetic CRS:  WGS 84\n\n#--Filter crime that intersects Barnet boundary\ncrime_bnt &lt;- crime[which(st_intersects(bnt_shp, crime, sparse = FALSE)),]\n\n#--Reproject onto OSGB36\ncrime_bnt &lt;- st_transform(crime_bnt, 27700)\n\n\n\n\nSubset Data by Type of Crime\n\n\nCode\n#--Subset crime data \nasb &lt;- subset(crime_bnt, category == \"anti social behaviour\")\nvc &lt;- subset(crime_bnt, category == \"violent crime\")\nother &lt;- subset(crime_bnt, category == \"other theft\")\nvhc &lt;- subset(crime_bnt, category == \"vehicle crime\")\ntfp &lt;- subset(crime_bnt, category == \"theft from the person\")\nbrg &lt;- subset(crime_bnt, category == \"burglary\")"
  },
  {
    "objectID": "autocorrelation.html#global-spatial-autocorrelation",
    "href": "autocorrelation.html#global-spatial-autocorrelation",
    "title": "Autocorrelation",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nWe will investigate if there is a spatial autocorrelation overall in each type of crime. First of all, we need to define neighbours as spatial autocorrelation is contingent on how we define neighbours. While there are many ways to do so, we will deinfe points as neighbours if they are within a certain distance. This distance is called critical threshold.\n\nCreate Distance-Based Weight\n\nExample with ASB\n\n\nCode\n#--Get X and Y coordinates\nasb_coords &lt;- st_coordinates(asb)\n\n#--To find a critical threshold, find the k-nearest neighbors for k = 1\nknn1_asb &lt;- knearneigh(asb_coords)\n\n#--Convert k1 to nb\nk1_asb &lt;- knn2nb(knn1_asb)\n\n#--Calculate critical threshold: maximum distance between neighbours\ncritical_threshold_asb &lt;- max(unlist(nbdists(k1_asb, asb_coords)))\n\ncritical_threshold_asb\n#&gt; [1] 660.1971\n\n#--Calculate distance-band weights\nnb_dist_band_asb &lt;- dnearneigh(asb_coords, 0, critical_threshold_asb)\n\nsummary(nb_dist_band_asb)\n#&gt; Neighbour list object:\n#&gt; Number of regions: 25551 \n#&gt; Number of nonzero links: 18578630 \n#&gt; Percentage nonzero weights: 2.845757 \n#&gt; Average number of links: 727.1195 \n#&gt; Link number distribution:\n#&gt; \n#&gt;    1    2    4    6    7    8    9   12   15   16   18   22   23   26   27   28 \n#&gt;    3    2    4    1    7    1    1    2    5    3    6    2    2   24    9    4 \n#&gt;   30   31   32   33   34   35   36   37   38   39   40   42   43   44   46   48 \n#&gt;   26    6    2    4    2    2   25    1    2   30    3    6   38    2    5    5 \n#&gt;   49   50   51   55   57   60   62   63   65   66   67   68   69   70   71   72 \n#&gt;    6    8    4    4    1    2    2    6    1    5    1    1    7    4    1    4 \n#&gt;   73   74   75   76   77   78   80   82   83   86   91   92   94   98   99  100 \n#&gt;    3    1    2   23    3   10    2    2    6    9    1   13    7   10    4    2 \n#&gt;  101  103  105  106  107  108  109  110  111  112  113  114  115  116  117  118 \n#&gt;   17    2   10   43    1    5    3    4    5   27    2   23    7   23    7    1 \n#&gt;  119  120  121  122  123  125  126  127  128  129  130  131  132  133  134  135 \n#&gt;    4   11    6    3    6    1    9   20   14    2   18    2    9   14    7    5 \n#&gt;  137  138  139  140  141  143  146  150  152  153  156  157  158  159  160  162 \n#&gt;    7   17    7    4   11   13    7    4    2    4   16   19    1    3   68   13 \n#&gt;  164  165  167  168  169  171  173  174  175  176  178  179  180  181  182  183 \n#&gt;    1    1   10    5   12   12   32   11    5    8    1   14    8    2   18    4 \n#&gt;  184  185  186  187  188  189  190  191  192  193  195  196  197  198  199  200 \n#&gt;   10    8   15   15    1    2    8   22   19    5    5    6   20    7   14    2 \n#&gt;  201  202  203  204  205  206  207  208  209  210  211  212  213  214  215  216 \n#&gt;   25    7   22   39   14    6   26   10    2    3   16   21   11    7   41   16 \n#&gt;  217  218  219  220  221  222  223  224  225  227  228  229  230  231  232  233 \n#&gt;   16   16    8   37   24   62   35   25   12   18   18   11   10   26   13   42 \n#&gt;  234  235  236  237  238  239  240  241  242  243  244  245  246  247  248  249 \n#&gt;   43   10   23   25   11   22   29    6   11   24    8   34   14   21    2   23 \n#&gt;  250  251  252  253  254  255  256  257  258  259  260  261  262  263  264  265 \n#&gt;   15   55   30   11   13   11   43   10   43   33   23    5   43   31   39   63 \n#&gt;  266  267  268  269  270  271  272  273  274  275  276  277  278  279  280  281 \n#&gt;    3   22   52    3   42   35    5    4   40   16   50   46   46   47   27   44 \n#&gt;  282  283  284  285  286  287  288  289  290  291  292  293  294  295  296  297 \n#&gt;   18    8   26    7    9   20    6   23   37   44   62   13   58   22   83   53 \n#&gt;  298  299  300  301  302  303  304  305  306  307  308  309  310  311  312  313 \n#&gt;   12    8    3   31   18   41   33   16   11   17   22   16   55    7    4   65 \n#&gt;  314  315  316  317  318  319  320  321  322  323  324  325  326  327  328  329 \n#&gt;    7    3   11   18   18   18   15   13   21   21   11    2   10   19    3    5 \n#&gt;  330  331  332  333  334  335  336  337  338  339  340  341  342  343  344  345 \n#&gt;   24   13   23   14   37   21    1   30    9    2   25   73    2   46   33   12 \n#&gt;  346  347  348  349  350  351  352  353  354  355  356  357  358  359  360  361 \n#&gt;   52   24    9    4   53    2   16   11   12    2    1   27    2    5   20   19 \n#&gt;  362  363  364  365  366  367  368  369  370  372  373  374  375  376  377  378 \n#&gt;    1   23   24   10   85   33   26   12   56   45   18   63    3   27    9   27 \n#&gt;  379  380  381  382  383  384  385  386  387  388  389  390  391  392  393  394 \n#&gt;   31   35   55   20    8   13   33    3   85   83   40   13   81   32   24   64 \n#&gt;  395  396  397  398  399  400  401  402  403  404  405  406  407  408  409  410 \n#&gt;   12   17   46    6    7   16   12   25  122   52   47   90   17   32    5   42 \n#&gt;  411  412  413  414  416  417  418  419  420  421  422  424  425  426  427  428 \n#&gt;    3   75   19   19   29   85   66   34   38   38   21   15   15   29   68   18 \n#&gt;  429  430  431  432  433  434  435  436  437  438  439  440  441  442  443  444 \n#&gt;    9   30   11   37   28   50   13   12   14   13   14    9   24   50   34   37 \n#&gt;  445  446  447  448  449  450  451  452  453  454  455  456  457  458  459  460 \n#&gt;   26    6   14   53   16   10    2   41   41   42   23  189   28   38   25   15 \n#&gt;  461  462  463  464  465  466  467  468  469  470  471  472  473  474  475  476 \n#&gt;   16  233   23   19   59   34   30   94   67   28   35   18   17    4    6   15 \n#&gt;  477  478  479  480  481  482  483  484  485  486  487  488  489  490  491  492 \n#&gt;   61   12   48   48   68   44   26   67   20   31   11   11  177   10   84    8 \n#&gt;  493  494  495  496  497  498  499  500  501  502  503  504  505  506  507  508 \n#&gt;   37   41   17    8    2   29   10   19   51    8   65   63   51   65    8   15 \n#&gt;  509  510  511  512  513  514  515  516  517  518  519  520  521  522  523  524 \n#&gt;   41    9    3    8   20   23   19   10   42   26   15   18   19   16   28    5 \n#&gt;  525  526  527  528  529  530  531  532  533  534  535  536  537  538  539  540 \n#&gt;    6   39   17   16    2   23   33    1  119    5   22   59   29   32   42   14 \n#&gt;  541  542  543  544  545  546  547  548  549  550  551  552  553  554  555  556 \n#&gt;    2   38   51    3   69    2   30    7   74   29    8   17    9   34   11    4 \n#&gt;  557  558  559  560  561  562  563  564  565  566  567  568  569  570  571  572 \n#&gt;   18   20   57   30   54    4   71   48   10    3   21   44   41   18    9   12 \n#&gt;  573  574  575  576  577  578  579  580  581  582  583  584  585  586  587  588 \n#&gt;   20    3   22   35  141   38   19    2    4   30   11   15    5   16   17   15 \n#&gt;  589  590  591  592  593  594  595  596  597  598  599  600  603  604  606  607 \n#&gt;   29   39   15    5    6   15    8   24   16  146   11    9   18   21    1   61 \n#&gt;  608  611  613  614  615  616  618  619  620  621  622  623  624  625  626  628 \n#&gt;   57   43   65    1   10    9    2   19    2   22   77   56   10    6   56   10 \n#&gt;  629  630  631  632  633  634  635  636  637  638  639  642  643  644  645  646 \n#&gt;    6    4   22    3   66   51   12   23   47   58    3    4    4   39    3   15 \n#&gt;  647  648  649  650  651  652  653  654  655  656  657  658  659  660  661  662 \n#&gt;   41    1   16    1    2   42   36   11   15    4   22    1   17   11   28   20 \n#&gt;  663  664  665  666  667  668  669  670  671  673  674  675  676  677  678  680 \n#&gt;   36   16    7   10   93   70    3   13    2   41   52   40   10    7    9    7 \n#&gt;  681  682  683  684  685  686  687  688  689  690  691  693  694  696  697  698 \n#&gt;   23   14   12   15   21    7   17    6    1    4    2   28   23    4   61   15 \n#&gt;  699  701  702  703  704  705  706  708  709  710  711  713  714  716  717  719 \n#&gt;   65    1   35   45    5    1   18   23   19    4   58   51   30   25   17   14 \n#&gt;  720  721  722  723  725  726  727  728  729  730  731  732  733  734  735  736 \n#&gt;   20   14    7   12   39    5    1   12  101   11    3   11    2   45   26   13 \n#&gt;  738  739  740  741  742  743  744  745  746  747  748  749  750  751  753  754 \n#&gt;    2    2   16   27   10    3    3    4   44   23    1   55   89    3   27   32 \n#&gt;  755  756  757  758  760  761  763  764  765  766  767  768  769  770  771  772 \n#&gt;    3    7   12    2   61  134   28   27   22    7    1   20    4   16   22   40 \n#&gt;  773  776  777  778  779  781  782  783  784  785  786  787  788  789  790  791 \n#&gt;   43    3   16    5    5    6   16   12    5   59   85    7    3    1   27   24 \n#&gt;  792  793  794  795  796  797  798  799  800  801  803  804  805  806  808  809 \n#&gt;   37   22   11    6   14    3    5   13    2    7   22    1   25    6   28   29 \n#&gt;  810  811  812  813  814  815  816  817  818  819  820  822  823  824  825  826 \n#&gt;   16    1   14    8    7   25    2    4   26   53   61   20    8   30   13   58 \n#&gt;  827  828  829  830  831  832  834  835  836  837  839  840  842  843  844  845 \n#&gt;  113   27   59   31   58   13   84    1  386   35   21   30   20   11   20    5 \n#&gt;  846  847  849  850  851  852  853  854  857  858  859  860  861  862  863  864 \n#&gt;   13   26    6  175   11   42   63    4   14   28    7   35    4   13   10   63 \n#&gt;  865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n#&gt;   19   27   18   39   27    2    5    9   47   40  114   25   10    9   14   11 \n#&gt;  881  882  883  884  885  887  888  889  890  892  893  894  895  896  897  898 \n#&gt;    5   21   15   13    6    2   34    2    7   55  212    3  144   13    7    5 \n#&gt;  899  900  901  902  903  904  905  906  907  908  909  910  913  914  915  916 \n#&gt;   25   17   17   51   20   10   19   46    5    2   27   22    4   11    4   31 \n#&gt;  918  919  920  921  922  923  924  925  926  927  928  929  932  933  934  935 \n#&gt;   97   69   21   22   78    9   38   23    5    3    2   27   48   11   18   10 \n#&gt;  937  938  939  941  942  943  949  952  953  954  957  958  959  961  962  963 \n#&gt;    9   11   26    2   31    5   11    2    6   15    6    2    5    8    8    7 \n#&gt;  970  975  976  977  978  981  982  983  985  987  988  991  992  997  999 1000 \n#&gt;    2    2    5    2   13    2    5    1   42    3    6    1    1   13    6   11 \n#&gt; 1001 1004 1005 1006 1007 1008 1010 1011 1013 1015 1017 1019 1027 1028 1029 1031 \n#&gt;    2    3    6    5   36    1   19    3   10    9   18   25    2    1    8   22 \n#&gt; 1032 1033 1034 1037 1038 1039 1040 1041 1043 1045 1046 1049 1051 1056 1061 1062 \n#&gt;   31    1    6    1    5   42   11    2    5   42    6   16    6    1   13    8 \n#&gt; 1066 1068 1069 1074 1078 1079 1080 1083 1085 1087 1090 1092 1093 1094 1095 1096 \n#&gt;    5  144  329   17    7    5    7    1    8   19   13   16    3   18   19   11 \n#&gt; 1097 1100 1102 1103 1106 1108 1109 1110 1111 1112 1114 1117 1120 1124 1125 1127 \n#&gt;    7  211    4   11    4  173    3   32    5   18    8  134   55    5    1    3 \n#&gt; 1128 1131 1134 1135 1136 1138 1139 1140 1141 1142 1143 1144 1145 1147 1149 1150 \n#&gt;    3   82   41   35    7   11   56    2   45   23   14   27    2    4  100   31 \n#&gt; 1151 1153 1154 1155 1157 1159 1161 1162 1164 1165 1166 1167 1168 1169 1171 1173 \n#&gt;   12  145    1   45    3    1    4   16    2   20    4   11    6   10    3   10 \n#&gt; 1174 1176 1178 1179 1183 1184 1186 1187 1189 1191 1192 1193 1194 1201 1203 1204 \n#&gt;    4    8  165   15    5    1    1    9   16    2   41   13    4   24    9    8 \n#&gt; 1205 1206 1210 1212 1213 1215 1218 1219 1220 1222 1227 1235 1237 1241 1244 1247 \n#&gt;    4    8   31    1    7    5    2   15    1    4   25   39    7    1    6    1 \n#&gt; 1251 1252 1256 1261 1263 1267 1270 1272 1275 1277 1284 1287 1288 1291 1294 1299 \n#&gt;    8    5   46    4    9   32    1    3    1    2   34    9    8   31   25   29 \n#&gt; 1302 1309 1313 1317 1322 1325 1328 1335 1339 1340 1341 1350 1351 1354 1361 1372 \n#&gt;    6    3    1   10    7   28   12   66    1    5    2   28   44    2   32    1 \n#&gt; 1387 1391 1392 1393 1396 1398 1400 1402 1403 1404 1406 1409 1410 1414 1415 1423 \n#&gt;    4   19    9   14   43   12    2    4   14  117   26    1    7    9    1   12 \n#&gt; 1424 1430 1432 1446 1449 1452 1453 1463 1472 1473 1475 1481 1482 1483 1484 1485 \n#&gt;   21    2    7    5    2    2   20   21    8    4    5   82    2   37    4    1 \n#&gt; 1487 1491 1520 1522 1524 1525 1530 1534 1536 1537 1546 1551 1552 1562 1568 1569 \n#&gt;   13    2    7    2    1   42   21    1    3   61   16    3    7   16   89   59 \n#&gt; 1570 1583 1584 1595 1605 1607 1613 1625 1626 1629 1634 1643 1651 1665 1668 1674 \n#&gt;   36    1    5    5    2   17   20    3   33  133    1   91    6   10    6   17 \n#&gt; 1688 1705 1722 1735 1744 1772 1780 1794 1820 1838 1844 1847 1850 1866 1867 1869 \n#&gt;   16   12    2    8    6    4   33    4    4   13   37   93   12   71    1   42 \n#&gt; 1886 1890 1896 1918 1922 1929 1939 1971 1984 1986 2006 2009 2012 2018 2027 2030 \n#&gt;   77   50   36    5   23    5   25   32   83   35    6   10    3   27    2   14 \n#&gt; 2034 2044 2064 2073 2079 2088 2089 2095 2097 2099 2100 2103 2109 2115 2117 2119 \n#&gt;    7    1   13   12    2    6    2   12   18   41   12   23    2    3   12    1 \n#&gt; 2123 2127 2140 2146 2148 2150 2156 2160 2172 2177 2220 2308 2316 2324 2334 \n#&gt;    2   17    1    1   38    8    2    4   10    6    2    2    1   11    5 \n#&gt; 3 least connected regions:\n#&gt; 10690 11508 23955 with 1 link\n#&gt; 5 most connected regions:\n#&gt; 1838 1839 2397 16552 21929 with 2334 links\n\n#--Get cardinality: number of neighbours for each point\ndist_band_card_asb &lt;- spdep::card(nb_dist_band_asb)\n\n#--Check number of neighbours\nggplot() +\n  geom_histogram(aes(x=dist_band_card_asb)) +\n  xlab(\"Number of Neighbours\")+\n  ggtitle(\"Connectivity Histogram\")+\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nCode\n\n#--Create weight from nb\ndist_weight_asb &lt;- nb2listw(nb_dist_band_asb)\n\n\nThe critical threshold for ASB was 660m. That is, ASB points were considered neighbours #### Repeat ##### Define Function: create_dist_weight()\n\n\nCode\ncreate_dist_weight &lt;- function(crime_type){\n  #--Get X and Y coordinates\n  coords &lt;- st_coordinates(crime_type)\n\n  #--To find a critical threshold, find the k-nearest neighbors for k = 1\n  knn1 &lt;- knearneigh(coords)\n\n  #--Convert k1 to nb\n  k1 &lt;- knn2nb(knn1)\n\n  #--Calculate critical threshold: maximum distance between neighbours\n  critical_threshold &lt;- max(unlist(nbdists(k1, coords)))\n\n  print(paste0(\"Critical threshold is: \", critical_threshold, \"m\"))\n\n  #--Calculate distance-band weights\n  nb_dist_band &lt;- dnearneigh(coords, 0, critical_threshold)\n\n  summary(nb_dist_band)\n\n  #--Get cardinality: number of neighbours for each point\n  dist_band_card &lt;- spdep::card(nb_dist_band)\n\n  #--Create weight from nb\n  dist_weight &lt;- nb2listw(nb_dist_band)\n  print(\"Done\")\n  return(dist_weight)\n}\n\n\n\n\nLoop\n\n\nCode\n#--Create list of crimes by type\nl_crime &lt;- list(asb, vc, other, vhc, tfp, brg)\nnames(l_crime) &lt;- c(\"asb\", \"vc\", \"other\", \"vhc\", \"tfp\", \"brg\")\n\n#--Apply create_dist_weight()\nl_weight &lt;- vector(\"list\", length(l_crime))\nnames(l_weight) &lt;- names(l_crime)\nl_weight &lt;- lapply(l_crime, create_dist_weight)\n#&gt; [1] \"Critical threshold is: 660.197061933469m\"\n#&gt; Neighbour list object:\n#&gt; Number of regions: 25551 \n#&gt; Number of nonzero links: 18578630 \n#&gt; Percentage nonzero weights: 2.845757 \n#&gt; Average number of links: 727.1195 \n#&gt; Link number distribution:\n#&gt; \n#&gt;    1    2    4    6    7    8    9   12   15   16   18   22   23   26   27   28 \n#&gt;    3    2    4    1    7    1    1    2    5    3    6    2    2   24    9    4 \n#&gt;   30   31   32   33   34   35   36   37   38   39   40   42   43   44   46   48 \n#&gt;   26    6    2    4    2    2   25    1    2   30    3    6   38    2    5    5 \n#&gt;   49   50   51   55   57   60   62   63   65   66   67   68   69   70   71   72 \n#&gt;    6    8    4    4    1    2    2    6    1    5    1    1    7    4    1    4 \n#&gt;   73   74   75   76   77   78   80   82   83   86   91   92   94   98   99  100 \n#&gt;    3    1    2   23    3   10    2    2    6    9    1   13    7   10    4    2 \n#&gt;  101  103  105  106  107  108  109  110  111  112  113  114  115  116  117  118 \n#&gt;   17    2   10   43    1    5    3    4    5   27    2   23    7   23    7    1 \n#&gt;  119  120  121  122  123  125  126  127  128  129  130  131  132  133  134  135 \n#&gt;    4   11    6    3    6    1    9   20   14    2   18    2    9   14    7    5 \n#&gt;  137  138  139  140  141  143  146  150  152  153  156  157  158  159  160  162 \n#&gt;    7   17    7    4   11   13    7    4    2    4   16   19    1    3   68   13 \n#&gt;  164  165  167  168  169  171  173  174  175  176  178  179  180  181  182  183 \n#&gt;    1    1   10    5   12   12   32   11    5    8    1   14    8    2   18    4 \n#&gt;  184  185  186  187  188  189  190  191  192  193  195  196  197  198  199  200 \n#&gt;   10    8   15   15    1    2    8   22   19    5    5    6   20    7   14    2 \n#&gt;  201  202  203  204  205  206  207  208  209  210  211  212  213  214  215  216 \n#&gt;   25    7   22   39   14    6   26   10    2    3   16   21   11    7   41   16 \n#&gt;  217  218  219  220  221  222  223  224  225  227  228  229  230  231  232  233 \n#&gt;   16   16    8   37   24   62   35   25   12   18   18   11   10   26   13   42 \n#&gt;  234  235  236  237  238  239  240  241  242  243  244  245  246  247  248  249 \n#&gt;   43   10   23   25   11   22   29    6   11   24    8   34   14   21    2   23 \n#&gt;  250  251  252  253  254  255  256  257  258  259  260  261  262  263  264  265 \n#&gt;   15   55   30   11   13   11   43   10   43   33   23    5   43   31   39   63 \n#&gt;  266  267  268  269  270  271  272  273  274  275  276  277  278  279  280  281 \n#&gt;    3   22   52    3   42   35    5    4   40   16   50   46   46   47   27   44 \n#&gt;  282  283  284  285  286  287  288  289  290  291  292  293  294  295  296  297 \n#&gt;   18    8   26    7    9   20    6   23   37   44   62   13   58   22   83   53 \n#&gt;  298  299  300  301  302  303  304  305  306  307  308  309  310  311  312  313 \n#&gt;   12    8    3   31   18   41   33   16   11   17   22   16   55    7    4   65 \n#&gt;  314  315  316  317  318  319  320  321  322  323  324  325  326  327  328  329 \n#&gt;    7    3   11   18   18   18   15   13   21   21   11    2   10   19    3    5 \n#&gt;  330  331  332  333  334  335  336  337  338  339  340  341  342  343  344  345 \n#&gt;   24   13   23   14   37   21    1   30    9    2   25   73    2   46   33   12 \n#&gt;  346  347  348  349  350  351  352  353  354  355  356  357  358  359  360  361 \n#&gt;   52   24    9    4   53    2   16   11   12    2    1   27    2    5   20   19 \n#&gt;  362  363  364  365  366  367  368  369  370  372  373  374  375  376  377  378 \n#&gt;    1   23   24   10   85   33   26   12   56   45   18   63    3   27    9   27 \n#&gt;  379  380  381  382  383  384  385  386  387  388  389  390  391  392  393  394 \n#&gt;   31   35   55   20    8   13   33    3   85   83   40   13   81   32   24   64 \n#&gt;  395  396  397  398  399  400  401  402  403  404  405  406  407  408  409  410 \n#&gt;   12   17   46    6    7   16   12   25  122   52   47   90   17   32    5   42 \n#&gt;  411  412  413  414  416  417  418  419  420  421  422  424  425  426  427  428 \n#&gt;    3   75   19   19   29   85   66   34   38   38   21   15   15   29   68   18 \n#&gt;  429  430  431  432  433  434  435  436  437  438  439  440  441  442  443  444 \n#&gt;    9   30   11   37   28   50   13   12   14   13   14    9   24   50   34   37 \n#&gt;  445  446  447  448  449  450  451  452  453  454  455  456  457  458  459  460 \n#&gt;   26    6   14   53   16   10    2   41   41   42   23  189   28   38   25   15 \n#&gt;  461  462  463  464  465  466  467  468  469  470  471  472  473  474  475  476 \n#&gt;   16  233   23   19   59   34   30   94   67   28   35   18   17    4    6   15 \n#&gt;  477  478  479  480  481  482  483  484  485  486  487  488  489  490  491  492 \n#&gt;   61   12   48   48   68   44   26   67   20   31   11   11  177   10   84    8 \n#&gt;  493  494  495  496  497  498  499  500  501  502  503  504  505  506  507  508 \n#&gt;   37   41   17    8    2   29   10   19   51    8   65   63   51   65    8   15 \n#&gt;  509  510  511  512  513  514  515  516  517  518  519  520  521  522  523  524 \n#&gt;   41    9    3    8   20   23   19   10   42   26   15   18   19   16   28    5 \n#&gt;  525  526  527  528  529  530  531  532  533  534  535  536  537  538  539  540 \n#&gt;    6   39   17   16    2   23   33    1  119    5   22   59   29   32   42   14 \n#&gt;  541  542  543  544  545  546  547  548  549  550  551  552  553  554  555  556 \n#&gt;    2   38   51    3   69    2   30    7   74   29    8   17    9   34   11    4 \n#&gt;  557  558  559  560  561  562  563  564  565  566  567  568  569  570  571  572 \n#&gt;   18   20   57   30   54    4   71   48   10    3   21   44   41   18    9   12 \n#&gt;  573  574  575  576  577  578  579  580  581  582  583  584  585  586  587  588 \n#&gt;   20    3   22   35  141   38   19    2    4   30   11   15    5   16   17   15 \n#&gt;  589  590  591  592  593  594  595  596  597  598  599  600  603  604  606  607 \n#&gt;   29   39   15    5    6   15    8   24   16  146   11    9   18   21    1   61 \n#&gt;  608  611  613  614  615  616  618  619  620  621  622  623  624  625  626  628 \n#&gt;   57   43   65    1   10    9    2   19    2   22   77   56   10    6   56   10 \n#&gt;  629  630  631  632  633  634  635  636  637  638  639  642  643  644  645  646 \n#&gt;    6    4   22    3   66   51   12   23   47   58    3    4    4   39    3   15 \n#&gt;  647  648  649  650  651  652  653  654  655  656  657  658  659  660  661  662 \n#&gt;   41    1   16    1    2   42   36   11   15    4   22    1   17   11   28   20 \n#&gt;  663  664  665  666  667  668  669  670  671  673  674  675  676  677  678  680 \n#&gt;   36   16    7   10   93   70    3   13    2   41   52   40   10    7    9    7 \n#&gt;  681  682  683  684  685  686  687  688  689  690  691  693  694  696  697  698 \n#&gt;   23   14   12   15   21    7   17    6    1    4    2   28   23    4   61   15 \n#&gt;  699  701  702  703  704  705  706  708  709  710  711  713  714  716  717  719 \n#&gt;   65    1   35   45    5    1   18   23   19    4   58   51   30   25   17   14 \n#&gt;  720  721  722  723  725  726  727  728  729  730  731  732  733  734  735  736 \n#&gt;   20   14    7   12   39    5    1   12  101   11    3   11    2   45   26   13 \n#&gt;  738  739  740  741  742  743  744  745  746  747  748  749  750  751  753  754 \n#&gt;    2    2   16   27   10    3    3    4   44   23    1   55   89    3   27   32 \n#&gt;  755  756  757  758  760  761  763  764  765  766  767  768  769  770  771  772 \n#&gt;    3    7   12    2   61  134   28   27   22    7    1   20    4   16   22   40 \n#&gt;  773  776  777  778  779  781  782  783  784  785  786  787  788  789  790  791 \n#&gt;   43    3   16    5    5    6   16   12    5   59   85    7    3    1   27   24 \n#&gt;  792  793  794  795  796  797  798  799  800  801  803  804  805  806  808  809 \n#&gt;   37   22   11    6   14    3    5   13    2    7   22    1   25    6   28   29 \n#&gt;  810  811  812  813  814  815  816  817  818  819  820  822  823  824  825  826 \n#&gt;   16    1   14    8    7   25    2    4   26   53   61   20    8   30   13   58 \n#&gt;  827  828  829  830  831  832  834  835  836  837  839  840  842  843  844  845 \n#&gt;  113   27   59   31   58   13   84    1  386   35   21   30   20   11   20    5 \n#&gt;  846  847  849  850  851  852  853  854  857  858  859  860  861  862  863  864 \n#&gt;   13   26    6  175   11   42   63    4   14   28    7   35    4   13   10   63 \n#&gt;  865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n#&gt;   19   27   18   39   27    2    5    9   47   40  114   25   10    9   14   11 \n#&gt;  881  882  883  884  885  887  888  889  890  892  893  894  895  896  897  898 \n#&gt;    5   21   15   13    6    2   34    2    7   55  212    3  144   13    7    5 \n#&gt;  899  900  901  902  903  904  905  906  907  908  909  910  913  914  915  916 \n#&gt;   25   17   17   51   20   10   19   46    5    2   27   22    4   11    4   31 \n#&gt;  918  919  920  921  922  923  924  925  926  927  928  929  932  933  934  935 \n#&gt;   97   69   21   22   78    9   38   23    5    3    2   27   48   11   18   10 \n#&gt;  937  938  939  941  942  943  949  952  953  954  957  958  959  961  962  963 \n#&gt;    9   11   26    2   31    5   11    2    6   15    6    2    5    8    8    7 \n#&gt;  970  975  976  977  978  981  982  983  985  987  988  991  992  997  999 1000 \n#&gt;    2    2    5    2   13    2    5    1   42    3    6    1    1   13    6   11 \n#&gt; 1001 1004 1005 1006 1007 1008 1010 1011 1013 1015 1017 1019 1027 1028 1029 1031 \n#&gt;    2    3    6    5   36    1   19    3   10    9   18   25    2    1    8   22 \n#&gt; 1032 1033 1034 1037 1038 1039 1040 1041 1043 1045 1046 1049 1051 1056 1061 1062 \n#&gt;   31    1    6    1    5   42   11    2    5   42    6   16    6    1   13    8 \n#&gt; 1066 1068 1069 1074 1078 1079 1080 1083 1085 1087 1090 1092 1093 1094 1095 1096 \n#&gt;    5  144  329   17    7    5    7    1    8   19   13   16    3   18   19   11 \n#&gt; 1097 1100 1102 1103 1106 1108 1109 1110 1111 1112 1114 1117 1120 1124 1125 1127 \n#&gt;    7  211    4   11    4  173    3   32    5   18    8  134   55    5    1    3 \n#&gt; 1128 1131 1134 1135 1136 1138 1139 1140 1141 1142 1143 1144 1145 1147 1149 1150 \n#&gt;    3   82   41   35    7   11   56    2   45   23   14   27    2    4  100   31 \n#&gt; 1151 1153 1154 1155 1157 1159 1161 1162 1164 1165 1166 1167 1168 1169 1171 1173 \n#&gt;   12  145    1   45    3    1    4   16    2   20    4   11    6   10    3   10 \n#&gt; 1174 1176 1178 1179 1183 1184 1186 1187 1189 1191 1192 1193 1194 1201 1203 1204 \n#&gt;    4    8  165   15    5    1    1    9   16    2   41   13    4   24    9    8 \n#&gt; 1205 1206 1210 1212 1213 1215 1218 1219 1220 1222 1227 1235 1237 1241 1244 1247 \n#&gt;    4    8   31    1    7    5    2   15    1    4   25   39    7    1    6    1 \n#&gt; 1251 1252 1256 1261 1263 1267 1270 1272 1275 1277 1284 1287 1288 1291 1294 1299 \n#&gt;    8    5   46    4    9   32    1    3    1    2   34    9    8   31   25   29 \n#&gt; 1302 1309 1313 1317 1322 1325 1328 1335 1339 1340 1341 1350 1351 1354 1361 1372 \n#&gt;    6    3    1   10    7   28   12   66    1    5    2   28   44    2   32    1 \n#&gt; 1387 1391 1392 1393 1396 1398 1400 1402 1403 1404 1406 1409 1410 1414 1415 1423 \n#&gt;    4   19    9   14   43   12    2    4   14  117   26    1    7    9    1   12 \n#&gt; 1424 1430 1432 1446 1449 1452 1453 1463 1472 1473 1475 1481 1482 1483 1484 1485 \n#&gt;   21    2    7    5    2    2   20   21    8    4    5   82    2   37    4    1 \n#&gt; 1487 1491 1520 1522 1524 1525 1530 1534 1536 1537 1546 1551 1552 1562 1568 1569 \n#&gt;   13    2    7    2    1   42   21    1    3   61   16    3    7   16   89   59 \n#&gt; 1570 1583 1584 1595 1605 1607 1613 1625 1626 1629 1634 1643 1651 1665 1668 1674 \n#&gt;   36    1    5    5    2   17   20    3   33  133    1   91    6   10    6   17 \n#&gt; 1688 1705 1722 1735 1744 1772 1780 1794 1820 1838 1844 1847 1850 1866 1867 1869 \n#&gt;   16   12    2    8    6    4   33    4    4   13   37   93   12   71    1   42 \n#&gt; 1886 1890 1896 1918 1922 1929 1939 1971 1984 1986 2006 2009 2012 2018 2027 2030 \n#&gt;   77   50   36    5   23    5   25   32   83   35    6   10    3   27    2   14 \n#&gt; 2034 2044 2064 2073 2079 2088 2089 2095 2097 2099 2100 2103 2109 2115 2117 2119 \n#&gt;    7    1   13   12    2    6    2   12   18   41   12   23    2    3   12    1 \n#&gt; 2123 2127 2140 2146 2148 2150 2156 2160 2172 2177 2220 2308 2316 2324 2334 \n#&gt;    2   17    1    1   38    8    2    4   10    6    2    2    1   11    5 \n#&gt; 3 least connected regions:\n#&gt; 10690 11508 23955 with 1 link\n#&gt; 5 most connected regions:\n#&gt; 1838 1839 2397 16552 21929 with 2334 links\n#&gt; [1] \"Done\"\n#&gt; [1] \"Critical threshold is: 485.742261911301m\"\n#&gt; Neighbour list object:\n#&gt; Number of regions: 23840 \n#&gt; Number of nonzero links: 8979138 \n#&gt; Percentage nonzero weights: 1.579873 \n#&gt; Average number of links: 376.6417 \n#&gt; Link number distribution:\n#&gt; \n#&gt;    1    2    4    5    6    7    8    9   11   12   13   15   17   18   19   20 \n#&gt;    2    4    2    5    2    7    5    3   10   21    4    6   15   13    2   11 \n#&gt;   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36 \n#&gt;    1    2    4   26    2    7   38   10    2   20   10    5   17   11   28    6 \n#&gt;   37   38   40   42   43   44   45   46   47   48   49   50   51   52   53   54 \n#&gt;   25   11    1    6    2   24    1   13   15   30   18    5   12   38   13   14 \n#&gt;   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70 \n#&gt;   16    9    7   13    5   17    1    5   10   20   12    8   10    7    9   14 \n#&gt;   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86 \n#&gt;   10   11   13    7    4   10   18   38   18   21    8   26   15    1    4    8 \n#&gt;   87   88   89   90   91   92   93   94   95   96   97   98   99  100  101  102 \n#&gt;   27   22   10   24   52   36   19   20    7   34   30   20   29   23   28   36 \n#&gt;  103  104  105  106  107  108  109  110  111  112  113  114  115  116  117  118 \n#&gt;   16   36   31   27   21   13   36   26   42   20    9   32   14   15    8   21 \n#&gt;  119  120  121  122  123  124  125  126  127  128  129  130  131  132  133  134 \n#&gt;   32   35    9   20   53   25   47   54   20   36   37   30   40   30   21   14 \n#&gt;  135  136  137  138  139  140  141  142  143  144  145  146  147  148  149  150 \n#&gt;   13   44   39   43   28   24   54   54   56   78   11   28   35   38   50   41 \n#&gt;  151  152  153  154  155  156  157  158  159  160  161  162  163  164  165  166 \n#&gt;   57   38   36   34   28    9   26   12   52   45   24   19   21   37   28   38 \n#&gt;  167  168  169  170  171  172  173  174  175  176  177  178  179  180  181  182 \n#&gt;   44   23   43   19   40   21   35   55   49   58   27  114   34   68   19   69 \n#&gt;  183  184  185  186  187  188  189  190  191  192  193  194  195  196  197  198 \n#&gt;   23   27   70   24   63   37   78   32   43   76   72   72   50   37   21   34 \n#&gt;  199  200  201  202  203  204  205  206  207  208  209  210  211  212  213  214 \n#&gt;   31   40   48   42   34    9   40   66   29   37   31   39   31   82   16   92 \n#&gt;  215  216  217  218  219  220  221  222  223  224  225  226  227  228  229  230 \n#&gt;   72   58   38   63   56   26   88   82   56   73   78   62   87   44   58   38 \n#&gt;  231  232  233  234  235  236  237  238  239  240  241  242  243  244  245  246 \n#&gt;   45   66   65   33   33   77   36   27  104   78   70   52   45   90   36   66 \n#&gt;  247  248  249  250  251  252  253  254  255  256  257  258  259  260  261  262 \n#&gt;   57   73   61   63   20   40   82   37   35   29   17   43   20   10   24   79 \n#&gt;  263  264  265  266  267  268  269  270  271  272  273  274  275  276  277  278 \n#&gt;   20   44   72   39  108    6   40   15   23   58   37   33  124   52   45   52 \n#&gt;  279  280  281  282  283  284  285  286  287  288  289  290  291  292  293  294 \n#&gt;   33    6   50   47   61   45   33   39   95   81   24   30   43   77  149   30 \n#&gt;  295  296  297  298  299  300  301  302  303  304  305  306  307  308  309  310 \n#&gt;   22   80    8   29   75   36   41  118   35   42   72   25   34   14   35   43 \n#&gt;  311  312  313  314  315  316  317  318  319  320  321  322  323  324  325  326 \n#&gt;   60   57   22   29   76   40   36   21   36   42   61   33    6   35   21   60 \n#&gt;  327  328  329  330  331  332  333  334  335  336  337  338  339  340  341  342 \n#&gt;   17   23   54   67   78   26   52   65   16   52   31   60   87   64   48   42 \n#&gt;  343  344  345  346  347  348  349  350  351  352  353  354  355  356  357  358 \n#&gt;   22   37   42   39   64    3   38   34   85   88   24   54   43   93   71   30 \n#&gt;  359  360  361  362  363  364  365  366  367  368  369  370  371  372  373  374 \n#&gt;   36   33   34   71   87   35   47   55   65   28   41   39  103   49   13   99 \n#&gt;  375  376  377  378  379  380  381  382  383  384  385  386  387  388  389  390 \n#&gt;   31   52   12   16   39   13   67   27   12   39   29   25   11   28    6   46 \n#&gt;  391  392  393  394  395  396  397  398  399  400  401  402  403  404  405  406 \n#&gt;   41   69   34   23   71  136   31   14  117   58   19   34    5   19   40   34 \n#&gt;  407  408  409  410  411  412  413  414  415  416  417  418  419  420  421  422 \n#&gt;   17   15   34   10   41    5   45   27   61   10   73   67   23   24   43   49 \n#&gt;  423  424  425  426  427  428  429  430  431  432  433  434  435  436  437  438 \n#&gt;   26   51    8   35   63   30   73   16   19   37   17   69   17   24   39    6 \n#&gt;  439  440  441  442  443  444  446  447  448  449  450  451  452  453  454  455 \n#&gt;   32   51   68   59   45   14   27    8   27   30    8   22   12   33   10   16 \n#&gt;  456  457  458  459  460  461  462  463  464  465  466  467  468  469  470  472 \n#&gt;    6   29   59   12   45    8    5   51  106   63   24   19   60   14   18    8 \n#&gt;  473  474  475  476  477  478  479  480  481  482  483  484  485  486  487  488 \n#&gt;   23    5   40   16    4    5   36   47   11   22    5   31   12   45   30   25 \n#&gt;  489  490  491  492  493  494  495  496  497  498  500  501  502  503  504  505 \n#&gt;   14    8   45    4   43   37   27   48   21    9   29   15   69   13   16   11 \n#&gt;  506  507  508  509  510  511  512  513  514  515  516  518  519  520  521  522 \n#&gt;   18   27   45   33   18   29   16   20   48   31    5   24   23   11   37   40 \n#&gt;  523  524  525  526  527  528  529  530  531  532  533  534  535  536  537  538 \n#&gt;   15   31   28    4   22   13   37    9   17   13    8   33   25    3   11   35 \n#&gt;  539  540  541  542  543  544  545  547  548  550  551  552  553  554  555  556 \n#&gt;   10   33   88   12   52    6    9   37   10    4   16   16   69   15    8   29 \n#&gt;  557  558  559  561  562  563  564  565  566  568  570  573  574  575  576  577 \n#&gt;   27  122   42   12  420    4    3   15   49   20    7    8   13    6   39   71 \n#&gt;  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592  594 \n#&gt;   15   10   23   15   33   62   13   17   30    9   77    2    4   29   25   51 \n#&gt;  595  596  597  598  599  600  601  602  603  604  605  606  608  609  610  611 \n#&gt;   39   45    7    9   15   19   18   12   99   26   10   43    4   55   17   14 \n#&gt;  612  613  614  615  616  617  618  619  620  621  622  623  624  625  627  628 \n#&gt;   22   11   17    2  147   20   23   15   27   88   75  143   57   14   50   37 \n#&gt;  629  630  631  632  633  634  635  637  638  639  640  641  642  643  644  646 \n#&gt;   26   11   53   20   14   11   24   13   35   21   42   12   32   22   12   43 \n#&gt;  649  650  652  653  654  655  656  657  658  659  660  661  667  668  669  670 \n#&gt;   31   76   10   14   27    1   13    6   25   14    8    7    9    4   24    7 \n#&gt;  671  672  674  675  676  677  678  679  680  681  682  683  684  685  687  688 \n#&gt;    6   22    4   44   21    8   48   14   64   13   45   22   19    5   46    2 \n#&gt;  690  691  692  693  694  696  697  699  700  702  703  707  708  709  710  711 \n#&gt;   13   31    8   41    5   25   11    5    4   19   37   21   10   35   24   18 \n#&gt;  712  713  714  715  716  717  718  720  721  722  725  727  728  729  730  732 \n#&gt;   24    3    1    2    6    1    4   10   33   24   30   23   19   21    4    3 \n#&gt;  733  734  735  739  741  742  744  745  746  747  748  749  752  753  755  756 \n#&gt;   24   11    3   17   22   13   11   10    8   90   27   21   10   44   24   26 \n#&gt;  758  759  760  764  765  767  768  770  771  774  777  780  783  784  785  787 \n#&gt;   32    6   26   13    5   13    4   15    3    7    2   18    6    4    3   38 \n#&gt;  789  791  797  799  801  804  807  809  810  811  814  822  826  828  829  832 \n#&gt;    8   10    1   20   18    8    2   60   15   55   15   24   10    8    2  136 \n#&gt;  834  835  836  838  840  842  845  846  851  853  856  867  870  872  875  884 \n#&gt;    4    4    4    6    6    5    2    3    2    6    1    1    3   17   11    2 \n#&gt;  888  920  925  945  947  968  973  982 1026 1046 1047 1065 1088 1090 1092 1097 \n#&gt;    3    6   49    2   11   18    4    9    2    1   12    6    4    7   10   23 \n#&gt; 1098 1105 1106 1109 1110 1124 1136 1172 \n#&gt;   21   12    4    3    2    8    3    1 \n#&gt; 2 least connected regions:\n#&gt; 17957 23091 with 1 link\n#&gt; 1 most connected region:\n#&gt; 6729 with 1172 links\n#&gt; [1] \"Done\"\n#&gt; [1] \"Critical threshold is: 604.717806803019m\"\n#&gt; Neighbour list object:\n#&gt; Number of regions: 9045 \n#&gt; Number of nonzero links: 2044716 \n#&gt; Percentage nonzero weights: 2.499285 \n#&gt; Average number of links: 226.0604 \n#&gt; Link number distribution:\n#&gt; \n#&gt;   1   2   3   5   6   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22 \n#&gt;   3   3   2   1   2   3   4   4   6   7  21   9  10   4   3  11  12   6   6  29 \n#&gt;  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42 \n#&gt;   2   3   3   9   4   8  11   5   1   8  22   7   9   3  13   9  13  11   5  13 \n#&gt;  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62 \n#&gt;  12  14   7  16  16  20   3  15  15  16  27  19  22  10  45  24  31  18  20  17 \n#&gt;  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82 \n#&gt;  29  16  18  25  24  13  17  22  16   9  15  22  12  28   4  20  16  17  20   6 \n#&gt;  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 \n#&gt;  20  38  10  24  14  19  15  12  22  37  13  11  11   8   9  17  47  24  10  14 \n#&gt; 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 \n#&gt;  22  16  57  31  19  37   9  12  16  12  17  13  31  26  15  65  71  46  27  36 \n#&gt; 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 \n#&gt;  74  69  22  22  30  31  21  14  32  26  15  32  56  13  87  25  39  23  20  38 \n#&gt; 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 \n#&gt;  19  24  27  27  52  23  42  11  20  44  49  48  24  34  15  29  71  29  28  48 \n#&gt; 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 \n#&gt;   6  28  26  12  12  30  28  27  19  11  46  12  32  28  68  22  23  29  31  17 \n#&gt; 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 \n#&gt;  12  16  34  25  34  11  26  45  18  11  36  32  50  13  10  58 116  13  38  27 \n#&gt; 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 \n#&gt;  66  16  33  44  22  12  13  17  50  54  56  16  17  68  28  80  22  23  39  71 \n#&gt; 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 \n#&gt;  13  12   9  16  32   6  25   4  20  21  20  14   8  21   9   6  25  34  15  17 \n#&gt; 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 \n#&gt;  22  36  90  22  11  19  44  78  93  19  18  30  50  10  16   8  42  29  12  42 \n#&gt; 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 \n#&gt;  17  26  13  29  30   2  16  13  34  30   7  12  23  25   6  15  31  10   6  26 \n#&gt; 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 \n#&gt;  25   2  16  16  11  15   9  37  21  17  35  15   1  40   8  10   6  13   5  25 \n#&gt; 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 \n#&gt;   1  19  22  35  29   1   8   4   8   4   1   2  22   3   1   6   9   8  18  15 \n#&gt; 323 324 325 326 327 328 329 330 331 332 334 335 337 338 340 341 342 343 346 347 \n#&gt;  25   5  35   1  13   6   1   7   7   9  23   1  16   1   2   1   2   3   1   3 \n#&gt; 348 349 350 352 353 354 356 357 358 360 361 365 366 367 368 370 372 376 380 381 \n#&gt;   1   1   2  10   2   1   9   2   2   1   1   3   2   1   6   1   2   1   1   2 \n#&gt; 383 384 385 386 389 390 391 392 393 394 395 396 397 398 399 401 402 403 405 406 \n#&gt;   1   1   6   1   2   1   2   1   7  21   9   3   8   5   4   4   4   1   3   8 \n#&gt; 407 408 409 410 411 412 414 415 416 417 418 419 420 421 422 423 425 427 428 429 \n#&gt;   1   4   2   3   1  80   6   5   4   4   2   4  17   2   2 125   8  22   4   8 \n#&gt; 430 431 432 434 435 436 437 438 440 441 442 443 444 445 446 447 448 449 450 451 \n#&gt;   3   2  19 227  29  13  91 120   4  28  60  47 104  12  50  13  58  87   1   1 \n#&gt; 452 453 454 455 456 457 459 460 461 462 464 465 467 468 471 472 474 476 477 479 \n#&gt;   8  27   9   4  20  30   5  21   3  14   6   6  26   5   1   6  38  22   1   1 \n#&gt; 480 481 482 483 487 489 492 493 494 495 497 498 500 502 510 517 519 522 547 552 \n#&gt;   6   7   6   8   4   7   2   3   1   5   2   2   2   5   5   4   1   1   4   1 \n#&gt; 3 least connected regions:\n#&gt; 307 7432 7459 with 1 link\n#&gt; 1 most connected region:\n#&gt; 1782 with 552 links\n#&gt; [1] \"Done\"\n#&gt; [1] \"Critical threshold is: 573.015350706016m\"\n#&gt; Neighbour list object:\n#&gt; Number of regions: 13516 \n#&gt; Number of nonzero links: 3148774 \n#&gt; Percentage nonzero weights: 1.723634 \n#&gt; Average number of links: 232.9664 \n#&gt; Link number distribution:\n#&gt; \n#&gt;   5   6   7  11  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28 \n#&gt;   9   2   1   8   6   4   4   4   1  18  11   7   9   2   7   6  10   1   2   3 \n#&gt;  29  30  31  33  35  36  37  38  39  40  41  42  44  45  46  47  48  49  50  51 \n#&gt;   2   1   1   8   4   6   5   1   2  14   4  10   4   2  12   1  12   3   6  11 \n#&gt;  52  53  54  55  56  57  58  59  60  61  63  64  65  66  67  68  69  70  71  72 \n#&gt;  24  18   9   1   4   7  12   4   6   4   3   5   1  13  17   2   2  13   4   1 \n#&gt;  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92 \n#&gt;  20  22  24  15  10   1   9  17  11  15  18  18  14  12   4  19  12   3  38  60 \n#&gt;  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 \n#&gt;  26  28  30  14  12   9  14  14  27  23  23  22   9  28  20  36  30  27  46  37 \n#&gt; 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 \n#&gt;  34  23  15  18  58  27  27  24  32  42  33  43  39  28  31  20  30  49  47  43 \n#&gt; 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 \n#&gt;  34  47  35  70  41  54  52  91  41  54  38  53  38  35  62  36  36  22  60  30 \n#&gt; 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 \n#&gt;  41  60  54  76  32  37  56  70  35  46  37  44  59  38  26  75  44  40  16  39 \n#&gt; 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 \n#&gt;  43  79  59  54  85  46  50  47  32  35  44  86  64  60  78  68  46  53  48  40 \n#&gt; 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 \n#&gt;  56  46  32  59  64  37  33  34  31  51  64  37  55  44  52  68  43  88  55  55 \n#&gt; 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 \n#&gt;  60  89  80  35  52 131  58  42  59  34  60  64  95  60  69  52  35  55  71  55 \n#&gt; 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 \n#&gt;  58  56  59  94  49  83  54  60  32  40  90  46  43  49  51  18  68  61  55  31 \n#&gt; 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 \n#&gt;  50  52  55  36  59  85  89  81  76  72  53  43  32  45  70  65  39  48  55 145 \n#&gt; 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 \n#&gt;  27  37  28  69  51  34  58  64  38  75  47  51  31  62  85  28  47  59  46  33 \n#&gt; 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 \n#&gt;  46  35  46 104  58  44  42  16  31  33  20  43  34  36  70  11  31  23  60  22 \n#&gt; 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 \n#&gt;  43  17  30  24  44  56   7  26  31  22  43  15  31  15  35  19  26   6  47   5 \n#&gt; 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 \n#&gt;  13   7   8  45  24   9   6  11   9  15  17  16   7  13   2   4   2   2  73   6 \n#&gt; 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 \n#&gt;  26   3   1   6   2  15  23  17   7   5   7   4   7   6   9   2   2   2  16   4 \n#&gt; 374 375 376 377 378 379 381 382 384 387 391 395 396 397 398 399 402 403 405 406 \n#&gt;   3  54   5   8   4   5   7  33  16  64  11   5  14  21   2   1   5  99   6   1 \n#&gt; 408 409 410 412 413 415 416 417 418 419 420 421 422 423 424 425 426 427 428 430 \n#&gt;   2   5   8   2  12  83   7  41   4   4 127  11   5   8   9  10  21   1  14   4 \n#&gt; 431 432 434 435 436 437 438 439 440 441 446 449 450 451 452 453 454 456 459 460 \n#&gt;   2 178  14  12  20  13   7   2  10   3  23   2   1   6   1   1   8   5 126   5 \n#&gt; 462 464 465 470 478 479 480 481 484 485 488 490 492 501 502 506 507 514 515 530 \n#&gt;  11   8  25   2   8   2   2  12   4   3   2   6   5   2   7   1   1   2   3   1 \n#&gt; 591 601 607 608 614 616 626 \n#&gt;   3   6   4   4   1   3   5 \n#&gt; 9 least connected regions:\n#&gt; 59 524 804 4734 5688 6163 8531 9728 10399 with 5 links\n#&gt; 5 most connected regions:\n#&gt; 1057 1679 2251 2587 4286 with 626 links\n#&gt; [1] \"Done\"\n#&gt; [1] \"Critical threshold is: 915.135151068049m\"\n#&gt; Neighbour list object:\n#&gt; Number of regions: 2601 \n#&gt; Number of nonzero links: 597862 \n#&gt; Percentage nonzero weights: 8.837313 \n#&gt; Average number of links: 229.8585 \n#&gt; Link number distribution:\n#&gt; \n#&gt;   1   2   3   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22 \n#&gt;   2   1   1   2   1   5   2   6   5   5   6  11   5   9   8   5   3   6  14   4 \n#&gt;  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42 \n#&gt;   3  14   5   8   4   2   5   4   2   2   4   6   8  17   9  13   6  11   4   5 \n#&gt;  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62 \n#&gt;   2   8   4   6   4   9  11  38  10   6   5  11   8  11   3  12  19  19   5   9 \n#&gt;  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82 \n#&gt;   9   3   4   5   1   6  19   3  12   9   4  21   2   5  12  11   6   3  24   8 \n#&gt;  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 \n#&gt;  28  19  25  11   5  10  11  22   7  14  51   6   3   4   2   2   4   4   4   4 \n#&gt; 103 104 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 \n#&gt;  10   5   3   3  11  11   1   2   1   8   1   2   3   6   1   4  31  14   6   3 \n#&gt; 124 125 126 127 128 129 130 131 132 133 134 135 136 137 139 141 142 146 147 149 \n#&gt;  11  39  11  21   4  21   5  41   8   7   2   3   5   1   4   2   1   3   1   5 \n#&gt; 151 152 155 156 157 158 161 164 165 169 170 174 176 178 181 182 183 184 185 186 \n#&gt;   2   1   2   2  58   1   1   2   3   1   1   1   3   2   3   2  63  41  18  11 \n#&gt; 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 \n#&gt;   8  16  16  23  39  30   5   1   1  10   4  31  27  30   2   6  16   6   1   2 \n#&gt; 210 212 213 216 217 218 220 221 224 227 228 229 232 259 283 285 369 370 381 385 \n#&gt;   2   2   1   8   1   4   6   2   3   1   2   1  11   2   1   1   1   2   2   1 \n#&gt; 387 391 392 402 403 404 405 406 407 409 412 413 414 416 422 425 428 429 430 433 \n#&gt;   1  10   1   1   2   1   1  15   7   1   1   1   4  12   1   1   1   3   2  32 \n#&gt; 434 435 436 438 439 440 442 443 445 446 447 448 449 450 451 453 454 456 457 459 \n#&gt;   2   5  31   6   3   2   5   1   3   3   1  84  70  37  30 133 120 223   1   7 \n#&gt; 462 464 468 469 474 480 489 517 526 532 \n#&gt;   1   1   5   1   1   2  15   4   2   1 \n#&gt; 2 least connected regions:\n#&gt; 753 1769 with 1 link\n#&gt; 1 most connected region:\n#&gt; 606 with 532 links\n#&gt; [1] \"Done\"\n#&gt; [1] \"Critical threshold is: 460.915689137396m\"\n#&gt; Neighbour list object:\n#&gt; Number of regions: 6767 \n#&gt; Number of nonzero links: 613462 \n#&gt; Percentage nonzero weights: 1.339662 \n#&gt; Average number of links: 90.65494 \n#&gt; Link number distribution:\n#&gt; \n#&gt;   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20 \n#&gt;   5   6   3   2   9   4  18   4   6  19  17  23   6  16   3  23  12  19  16  16 \n#&gt;  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40 \n#&gt;  17  21  20  38  23  41  42  33  24  28  43  41  69  59  63  33  49  35  58  41 \n#&gt;  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60 \n#&gt;  52  56  37  58  54  82  33  44  47  56  69  64  62  54  72  75  36  36  54  43 \n#&gt;  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80 \n#&gt;  46  63  47  68  62  51  47  61  57  41  62  50  55  46  54  79  89  78  73  44 \n#&gt;  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 \n#&gt;  53  83  92  67  80 100  61  82  80  63  58  75  55  45  41  39  37  55  66  33 \n#&gt; 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 \n#&gt;  26  45  21  47  40  37  60  34  34  16  23  21  19  38  31  29  37  46  11  28 \n#&gt; 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 \n#&gt;  37  33  13  56  19  26  43  20  15   2  26  28   6   9  26   6  25  25   3  28 \n#&gt; 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 \n#&gt;  51  40  10  28  22  17  15   9  22  24  10  13  25   5  12  21  24  12   5  31 \n#&gt; 161 162 163 164 165 166 167 168 169 170 171 172 173 175 176 177 178 179 180 181 \n#&gt;   8   7  29   6   8  19   1  19  20   2  10   9  13  29  27  14   3   9  14  19 \n#&gt; 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 \n#&gt;   8   4   9   9  11  32  12  16  14   2   2   7  15   6   3  10   9   5  41   9 \n#&gt; 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 220 222 223 225 226 \n#&gt;   2   1   7   7   3  10   1   8  43  10   7   3  17   2   5   3   1  22   2   5 \n#&gt; 228 230 233 234 235 236 237 238 240 241 242 243 247 \n#&gt;   5   8  34   1   2   2   1  11  14  11   1  10   6 \n#&gt; 5 least connected regions:\n#&gt; 512 1076 1208 1620 4240 with 1 link\n#&gt; 6 most connected regions:\n#&gt; 5 430 1177 1853 2377 2679 with 247 links\n#&gt; [1] \"Done\"\n\n\n\n\n\nCount the Number of Neighbouring Points of Each Crime Point within 100m\n\nExample with ASB\n\n\nCode\n#--Count \ncounts_asb &lt;- numeric(nrow(asb))\n\nfor (i in seq_along(asb)){\n  #--Get a ponit \n  point &lt;- asb[i,]$geometry\n  \n  #--Get buffer basically area within 100m \n  buffer &lt;- st_buffer(point, units::as_units(100, \"m\"))\n  \n  #--Test if the asb points intersect with buffer\n  test &lt;- st_intersects(asb$geometry, buffer)\n\n  #--Calculate the number of points intersecting buffer\n  n &lt;- which(sapply(test, function(x) sum(x) != 0)) |&gt; length()\n\n  #--Exclude the point itself\n  counts_asb[i] &lt;- n - 1\n}\n\n#--Assign the counts to the 'count' column of the spatial points object\nasb$count &lt;- counts_asb\n\n#--Check the structure of 'asb' to ensure the count variable is added correctly\nsummary(asb)\n#&gt;    category               id               month           location_type     \n#&gt;  Length:25551       Min.   : 91710306   Length:25551       Length:25551      \n#&gt;  Class :character   1st Qu.: 97081088   Class :character   Class :character  \n#&gt;  Mode  :character   Median :103280983   Mode  :character   Mode  :character  \n#&gt;                     Mean   :103443093                                        \n#&gt;                     3rd Qu.:109502752                                        \n#&gt;                     Max.   :116586465                                        \n#&gt;  location_subtype   location.street.id location.street.name\n#&gt;  Length:25551       Min.   : 923463    Length:25551        \n#&gt;  Class :character   1st Qu.: 980725    Class :character    \n#&gt;  Mode  :character   Median :1661421    Mode  :character    \n#&gt;                     Mean   :1336059                        \n#&gt;                     3rd Qu.:1667149                        \n#&gt;                     Max.   :1677900                        \n#&gt;           geometry         count         \n#&gt;  POINT        :25551   Min.   :0.00e+00  \n#&gt;  epsg:27700   :    0   1st Qu.:0.00e+00  \n#&gt;  +proj=tmer...:    0   Median :0.00e+00  \n#&gt;                        Mean   :9.43e-03  \n#&gt;                        3rd Qu.:0.00e+00  \n#&gt;                        Max.   :1.03e+02\n\n\n\n\nRepeat\n\nDefine Function: count_crime()\n\n\nCode\ncount_crime &lt;- function(crime, radius){\n  #--Count \n  counts &lt;- numeric(nrow(crime))\n\n  for (i in seq_along(crime)){\n    #--Get a point \n    point &lt;- crime[i,]$geometry\n    \n    #--Get buffer basically area within the specified radius\n    buffer &lt;- st_buffer(point, units::as_units(radius, \"m\"))\n    \n    #--Test if the crime points intersect with buffer\n    test &lt;- st_intersects(crime$geometry, buffer)\n\n    #--Calculate the number of points intersecting buffer\n    n &lt;- which(sapply(test, function(x) sum(x) != 0)) |&gt; length()\n\n    #--Exclude the point itself\n    counts[i] &lt;- n - 1\n  }\n\n  #--Assign the counts to the 'count' column of the spatial points object\n  crime$count &lt;- counts\n  print(\"Done\")\n  return(crime)\n}\n\n\n\n\nLoop\n\n\nCode\n#--Count crime within 100m radius\nl_crime &lt;- map(l_crime, ~count_crime(.x, 100))\n#&gt; [1] \"Done\"\n#&gt; [1] \"Done\"\n#&gt; [1] \"Done\"\n#&gt; [1] \"Done\"\n#&gt; [1] \"Done\"\n#&gt; [1] \"Done\"\n\n\n\n\n\n\nPerform Global Autocorrelation Test\n\nExample with ASB\n\n\nCode\n# Conduct global Moran's I analysis\nset.seed(1234)\nmoran_asb &lt;- spdep::moran.test(asb$count, listw = dist_weight_asb)\n  # using the count of ASB crimes within 100m of each point as the variable to assess for global spatial autocorrelation\n\n# --Print Moran's I test results\nprint(moran_asb) \n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  asb$count  \n#&gt; weights: dist_weight_asb    \n#&gt; \n#&gt; Moran I statistic standard deviate = 2.6573, p-value = 0.003939\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      6.969130e-04     -3.913894e-05      7.672758e-08\n  # weak positive autocorrelation, that is, nearby points tend to have similar values\n\n\n\n\nRepeat\n\n\nCode\nl_moran &lt;- vector(\"list\", length(l_crime))\nl_moran &lt;- map2(.x = l_crime, .y = l_weight, .f = ~spdep::moran.test(.x$count, listw = .y))\n\nlapply(l_moran, print)\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = 2.6573, p-value = 0.003939\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      6.969130e-04     -3.913894e-05      7.672758e-08 \n#&gt; \n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.32804, p-value = 0.6286\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -1.647028e-04     -4.194807e-05      1.400344e-07 \n#&gt; \n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.17873, p-value = 0.5709\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -2.546378e-04     -1.105705e-04      6.496998e-07 \n#&gt; \n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = 0.50015, p-value = 0.3085\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      2.829501e-04     -7.399186e-05      5.093188e-07 \n#&gt; \n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = 0.46265, p-value = 0.3218\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      6.284823e-04     -3.846154e-04      4.794996e-06 \n#&gt; \n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = 1.1177, p-value = 0.1319\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      1.929608e-03     -1.477978e-04      3.454662e-06\n#&gt; $asb\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = 2.6573, p-value = 0.003939\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      6.969130e-04     -3.913894e-05      7.672758e-08 \n#&gt; \n#&gt; \n#&gt; $vc\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.32804, p-value = 0.6286\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -1.647028e-04     -4.194807e-05      1.400344e-07 \n#&gt; \n#&gt; \n#&gt; $other\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.17873, p-value = 0.5709\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -2.546378e-04     -1.105705e-04      6.496998e-07 \n#&gt; \n#&gt; \n#&gt; $vhc\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = 0.50015, p-value = 0.3085\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      2.829501e-04     -7.399186e-05      5.093188e-07 \n#&gt; \n#&gt; \n#&gt; $tfp\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = 0.46265, p-value = 0.3218\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      6.284823e-04     -3.846154e-04      4.794996e-06 \n#&gt; \n#&gt; \n#&gt; $brg\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  .x$count  \n#&gt; weights: .y    \n#&gt; \n#&gt; Moran I statistic standard deviate = 1.1177, p-value = 0.1319\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      1.929608e-03     -1.477978e-04      3.454662e-06\n\n\nOnly ASB points within 100m showed a weak positive spatial auto-correlation. We will then run the test again with a different set of radius for the buffer.\n\n\n\nPull Everything Together\n\n\nCode\nrun_global_sa &lt;- function(crime, radius, weight){\n  # Count crime within the specified radius\n  crime &lt;- count_crime(crime, radius)\n  print(\"Crime count added!\")\n\n  # Run global autocorrelation test\n  set.seed(1234)\n  moran &lt;- spdep::moran.test(crime$count, listw = weight)\n  print(moran)\n\n  return(moran)\n}\n\n\n\nLoop run_global_sa() with different sets of radius\n\n\nCode\nc_radius &lt;- c(50, 75, 200, 300)\n\nl_moran_radius &lt;- vector(\"list\", length(l_crime)-1)\nl_moran_radius &lt;- map(l_moran_radius, ~vector(\"list\", length(c_radius)))\nnames(l_moran_radius) &lt;- names(l_crime)[2:6]\n\nfor (j in 2:length(l_crime)){\n  for (i in seq_along(c_radius)){\n    l_moran_radius[[(j-1)]][[i]] &lt;- run_global_sa(\n      crime = l_crime[[j]],\n      radius = c_radius[[i]],\n      weight = l_weight[[j]])\n  }\n}\n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.36522, p-value = 0.6425\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -2.132557e-04     -4.194807e-05      2.200069e-07 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.36437, p-value = 0.6422\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -1.774724e-04     -4.194807e-05      1.383394e-07 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.36929, p-value = 0.644\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -2.114624e-04     -4.194807e-05      2.107093e-07 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.40668, p-value = 0.6579\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -2.376532e-04     -4.194807e-05      2.315813e-07 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.139, p-value = 0.5553\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -2.513731e-04     -1.105705e-04      1.026155e-06 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.15471, p-value = 0.5615\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -2.484190e-04     -1.105705e-04      7.939177e-07 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.2797, p-value = 0.6101\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -2.874777e-04     -1.105705e-04      4.000466e-07 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.28403, p-value = 0.6118\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -3.152505e-04     -1.105705e-04      5.193188e-07 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.10716, p-value = 0.5427\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -1.507892e-04     -7.399186e-05      5.136210e-07 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = -0.19079, p-value = 0.5757\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;     -2.058521e-04     -7.399186e-05      4.776522e-07 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = 0.71142, p-value = 0.2384\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      4.972694e-04     -7.399186e-05      6.447957e-07 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = 0.39901, p-value = 0.3449\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      2.450347e-04     -7.399186e-05      6.392625e-07 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = 1.2437, p-value = 0.1068\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      2.546008e-03     -3.846154e-04      5.552078e-06 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = 1.1557, p-value = 0.1239\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      2.362469e-03     -3.846154e-04      5.649864e-06 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = 0.65148, p-value = 0.2574\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      1.217077e-03     -3.846154e-04      6.044352e-06 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = 0.59598, p-value = 0.2756\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      1.096501e-03     -3.846154e-04      6.176107e-06 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = 0.53712, p-value = 0.2956\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      8.495753e-04     -1.477978e-04      3.448102e-06 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = 0.59442, p-value = 0.2761\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      9.260347e-04     -1.477978e-04      3.263568e-06 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = 1.3761, p-value = 0.0844\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      2.521486e-03     -1.477978e-04      3.762654e-06 \n#&gt; \n#&gt; [1] \"Done\"\n#&gt; [1] \"Crime count added!\"\n#&gt; \n#&gt;  Moran I test under randomisation\n#&gt; \n#&gt; data:  crime$count  \n#&gt; weights: weight    \n#&gt; \n#&gt; Moran I statistic standard deviate = 1.3032, p-value = 0.09625\n#&gt; alternative hypothesis: greater\n#&gt; sample estimates:\n#&gt; Moran I statistic       Expectation          Variance \n#&gt;      2.479044e-03     -1.477978e-04      4.062848e-06"
  },
  {
    "objectID": "autocorrelation.html#local-spatial-autocorrelation",
    "href": "autocorrelation.html#local-spatial-autocorrelation",
    "title": "Autocorrelation",
    "section": "Local Spatial Autocorrelation",
    "text": "Local Spatial Autocorrelation\n\n\nCode\n#--Perform Local Moran's I analysis\nlocal_moran &lt;- spdep::localmoran(asb$count, dist_weight_asb)\nasb$morans_I &lt;- local_moran[, 1]\nasb$expected_I &lt;- local_moran[, 2]\nasb$p_values &lt;- local_moran[,5]\n\nasb &lt;- asb |&gt; \n  mutate(quadrant = case_when(\n    morans_I &gt; 0 & expected_I &gt; 0 & p_values &lt; 0.05 ~\"High-High\",\n    morans_I &lt; 0 & expected_I &lt; 0 & p_values &lt; 0.05 ~\"Low-Low\",\n    morans_I &gt; 0 & expected_I &lt; 0 & p_values &lt; 0.05 ~\"High-Low\",\n    morans_I &lt; 0 & expected_I &gt; 0 & p_values &lt; 0.05 ~\"Low-High\", \n    .default = \"Not Significant\"\n  ))\n\nasb$quadrant &lt;- factor(asb$quadrant, levels = c(\"High-High\", \"Low-Low\", \"High-Low\", \"Low-High\", \"Not Significant\"))\n\ntable(asb$quadrant) |&gt;\n  as.data.frame() |&gt;\n  flextable()\n\n\nVar1FreqHigh-High0Low-Low1,534High-Low4Low-High0Not Significant24,013\n\n\nCode\n\n#--Plot the spatial data with color encoding for Local Moran's I\nggplot() +\n  geom_sf(data = asb, aes(colour = quadrant)) +\n  geom_sf(data = bnt_shp, alpha = 0, lwd = 2) +\n  theme_minimal() +\n  labs(colour = \"Quadrant\") +\n  ggtitle(\"Local Moran Cluster Map of ASB Points\")\n\n\n\n\n\n\n\n\n\nCode\n\npal_asb &lt;- leaflet::colorFactor(palette = 'RdYlGn', asb$quadrant)\n\nleaflet::leaflet(data = st_transform(asb, 4326)) |&gt;\n  leaflet::addTiles() |&gt;\n  leaflet::addCircles(\n    color = ~pal_asb(quadrant),\n    popup = ~month) |&gt;\n  leaflet::addLegend('bottomright',\n            pal =pal_asb,\n            values = ~quadrant,\n            title = 'Local Moran Cluster of ASB',\n            opacity = 0.7)"
  },
  {
    "objectID": "autocorrelation.html",
    "href": "autocorrelation.html",
    "title": "Autocorrelation",
    "section": "",
    "text": "“Everything is related to everything else, but near things are more related than distant things.” -Waldo R. Tobler\n\n\n\nSpatial autocorrelation is a way to measure how much things that are close to each other are similar or different. Imagine a usual rainy day in London. If it rains in one part of a town, it is also likely raining in nearby areas. This shows high spatial autocorrelation as weather in one place is similar to the weather in nearby places.\nIt is important to investigate spatial autocorrelation in each type of crime, particularly when we want to estimate risk of crime with place-based information. By analysing spatial autocorrelation, we can identify if there is any spatial pattern and hotspot for each type of crime.\n\n\n\n\n\n(a) positive - clustering (b) negative - dispersion (c) random\n\n\nThe diagram1 above illustrate examples of spatial autocorrelation. Both (a) and (b) show some patterns, whereas with (c) we can’t explain how black and white boxes are located. Hence, (c) is completely random and shows no pattern, therefore, no autocorrelation.\nFor (a), we can also see black boxes are clustered at a corner. This is clustering, or positive autocorrleation. One of the common measures of spatial autocorrelation, Moran’s Index (or Moran’s I) is positive in the case of (a). With (b), we can see a checkerboard pattern. We can safely say (b) is dispersed, which has negative spatial autocorrelation, scoring negative on Moran’s I."
  },
  {
    "objectID": "autocorrelation.html#introduction",
    "href": "autocorrelation.html#introduction",
    "title": "Autocorrelation",
    "section": "",
    "text": "“Everything is related to everything else, but near things are more related than distant things.” -Waldo R. Tobler\n\n\n\nSpatial autocorrelation is a way to measure how much things that are close to each other are similar or different. Imagine a usual rainy day in London. If it rains in one part of a town, it is also likely raining in nearby areas. This shows high spatial autocorrelation as weather in one place is similar to the weather in nearby places.\nIt is important to investigate spatial autocorrelation in each type of crime, particularly when we want to estimate risk of crime with place-based information. By analysing spatial autocorrelation, we can identify if there is any spatial pattern and hotspot for each type of crime.\n\n\n\n\n\n(a) positive - clustering (b) negative - dispersion (c) random\n\n\nThe diagram1 above illustrate examples of spatial autocorrelation. Both (a) and (b) show some patterns, whereas with (c) we can’t explain how black and white boxes are located. Hence, (c) is completely random and shows no pattern, therefore, no autocorrelation.\nFor (a), we can also see black boxes are clustered at a corner. This is clustering, or positive autocorrleation. One of the common measures of spatial autocorrelation, Moran’s Index (or Moran’s I) is positive in the case of (a). With (b), we can see a checkerboard pattern. We can safely say (b) is dispersed, which has negative spatial autocorrelation, scoring negative on Moran’s I."
  },
  {
    "objectID": "autocorrelation.html#footnotes",
    "href": "autocorrelation.html#footnotes",
    "title": "Autocorrelation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAnselin, Luc & Piras, Gianfranco. (2009). Approaches Towards the Identification of Patterns in Violent Events, Baghdad, Iraq. 82.↩︎"
  },
  {
    "objectID": "pca.html",
    "href": "pca.html",
    "title": "PCA",
    "section": "",
    "text": "Principal Componet Analysis (PCA) is a statistical technique that simplifies complex data by reducing dimensions. PCA is like finding the main themes in a complex book. As for the crime data, there are 52 predictor variables, and it can be challenging to see the bigger picture. PCA helps us identify the most important patterns or themes in this data, making it easier to understand and act upon."
  },
  {
    "objectID": "pca.html#introduction",
    "href": "pca.html#introduction",
    "title": "PCA",
    "section": "",
    "text": "Principal Componet Analysis (PCA) is a statistical technique that simplifies complex data by reducing dimensions. PCA is like finding the main themes in a complex book. As for the crime data, there are 52 predictor variables, and it can be challenging to see the bigger picture. PCA helps us identify the most important patterns or themes in this data, making it easier to understand and act upon."
  },
  {
    "objectID": "pca.html#pre-process-data",
    "href": "pca.html#pre-process-data",
    "title": "PCA",
    "section": "Pre-Process Data",
    "text": "Pre-Process Data\n\nSet Up\nSimilar to how we pre-processed data for kriging, we will pre-process the data. Ultimately, this step will result in two dataframes: one containing predictors and location (asb_pred) and the other for the outcome variable and location (asb_outcome).\n\n\nCode\nrm(list = ls())\n#--Install / load packages\npacman::p_load(sp, sf, data.table, rio, here, leaflet, gstat, tidyverse, Metrics, scales, corrr, ggcorrplot, FactoMineR, factoextra, corrplot)\n\n#--Import street-level asb data\nasb &lt;- import(here(\"3_output\", \"asb_with_nearest_distances.csv\"))\n\n#--Calculate count of crimes per location coordinate\nasb_count &lt;- asb |&gt; \n    group_by(location.latitude, location.longitude) |&gt;\n    count() |&gt; \n    ungroup() |&gt; \n    inner_join(asb, by = c('location.latitude', 'location.longitude')) |&gt; \n    distinct(location.latitude, location.longitude, .keep_all = TRUE) |&gt;\n    group_by(location.latitude, location.longitude) |&gt;\n    mutate(location_id = cur_group_id()) |&gt;\n    ungroup()\n\n#--Rename columns \nnames(asb_count)[grepl('longitude', names(asb_count))] &lt;- 'x' \nnames(asb_count)[grepl('latitude', names(asb_count))] &lt;- 'y' \n\n#--Convert dataframe to sf object and reproject to OSGB36\nasb_count_sf &lt;- asb_count |&gt; \n    st_as_sf(coords = c('x', 'y'), crs = 4326) \n\n#--Get coordinates\nasb_count_sf &lt;- asb_count_sf |&gt;\n    mutate(x = st_coordinates(asb_count_sf)[, 1],\n           y = st_coordinates(asb_count_sf)[, 2])\n\n#--Change the sf back to df\nasb_count &lt;- st_drop_geometry(asb_count_sf)\n\n#--Select only numeric columns\nasb_x &lt;- asb_count |&gt; select(x, y, starts_with('d'))\nasb_y &lt;- asb_count |&gt; select(x, y, n)\n\n\n\n\nSplit Data into Test & Train Sets\n\n\nCode\n#--Create random indices\ntotal_rows &lt;- nrow(asb_count)\nsample_size &lt;- round(total_rows * 0.75)\n\nset.seed(1234)\nrandom_indices &lt;- sample(1:total_rows, sample_size, replace = FALSE)\n\n#--Create test sets using the random indices\nx_train &lt;- asb_x[dimnames(asb_x)[[1]] %in% random_indices,] |&gt;\n    mutate(across(where(is.numeric), ~round(.x, 2)))\n\ny_train &lt;- asb_y[dimnames(asb_y)[[1]] %in% random_indices,]|&gt;\n    mutate(across(where(is.numeric), ~round(.x, 2)))\n\n#--Create training sets by excluding the indices used for the test set\nx_test &lt;- asb_x[!dimnames(asb_x)[[1]] %in% random_indices,]|&gt;\n    mutate(across(where(is.numeric), ~round(.x, 2)))\n\ny_test &lt;- asb_y[!dimnames(asb_y)[[1]] %in% random_indices,] |&gt;\n    mutate(across(where(is.numeric), ~round(.x, 2)))\n\n\nBoth outcome and predictor variables were split into test and train sets randomly. It is important that test sets do not learn from train sets. Hence, we will specifically create a PCA model using the train set of predictor variables, x_trian."
  },
  {
    "objectID": "pca.html#run-pca",
    "href": "pca.html#run-pca",
    "title": "PCA",
    "section": "Run PCA",
    "text": "Run PCA\n\n\nCode\n#--Apply PCA\nx_train_pca &lt;- FactoMineR::PCA(x_train[-c(1,2)], graph = FALSE, scale.unit = TRUE)\n\n#--Check cumulative percentage of variance\nfactoextra::fviz_eig(x_train_pca, addlabels = TRUE)\n\n\n\n\n\n\n\n\n\nScree plot visualises the amount of variation explained by each principal component. Component 1 to 7 explains around 70% of total variance. Hence, we will specify 7 as the number of components to keep.\n\n\nCode\n#--Apply PCA again with the selected number of components\nx_train_pca &lt;- PCA(x_train[-c(1,2)], graph = FALSE, scale.unit = TRUE, ncp = 7)\n\n#--Predict \nx_train_pred &lt;- FactoMineR::predict.PCA(x_train_pca, x_train[-c(1,2)])\nx_test_pred &lt;- FactoMineR::predict.PCA(x_train_pca, x_test[-c(1,2)])\n\n#--Extract PCA-transformed data\nx_train_pred_df &lt;- as.data.frame(x_train_pred$coord)\nx_test_pred_df &lt;- as.data.frame(x_test_pred$coord)\n\n#--Add coordinates to the PCA-transformed data\nx_train_pred_df &lt;- cbind(x_train_pred_df, x = x_train$x, y = x_train$y)\nx_test_pred_df &lt;- cbind(x_test_pred_df, x = x_test$x, y = x_test$y)"
  },
  {
    "objectID": "pca.html#understand-output",
    "href": "pca.html#understand-output",
    "title": "PCA",
    "section": "Understand Output",
    "text": "Understand Output\nNow that the predictor variables have been summarised to 7 principal components. We will try to understand what each component best represent. We can investigate how much each predictor variable contributed to the construction of a principal component by looking into cos^2 value of the PCA model.\n\n\nCode\n#--Extract information about variables\nvar &lt;- get_pca_var(x_train_pca)\n\n#--Contribution (how much each variable contributes to the construction of a principal component)\n#---Get values\nvar$cos2[,1] |&gt; sort(TRUE) |&gt; head(10)  \n#&gt;              d_car_repair             d_electronics d_money_exchange_transfer \n#&gt;                 0.7376445                 0.7199420                 0.6831509 \n#&gt;                 d_garages              d_veterinary               d_houseware \n#&gt;                 0.6539263                 0.6390873                 0.6125568 \n#&gt;                    d_fuel                 d_alcohol               d_warehouse \n#&gt;                 0.5895041                 0.5625536                 0.5478989 \n#&gt;                 d_laundry \n#&gt;                 0.4620741\nvar$cos2[,2] |&gt; sort(TRUE) |&gt; head(10)  \n#&gt;         d_bakery           d_bank        d_clothes         d_lawyer \n#&gt;        0.5309014        0.5040668        0.4497385        0.4453806 \n#&gt;         d_bridge   d_estate_agent d_post_secondary            d_atm \n#&gt;        0.4236631        0.3859658        0.3455982        0.3308320 \n#&gt;    d_post_office    d_convenience \n#&gt;        0.3158461        0.3135630\nvar$cos2[,3] |&gt; sort(TRUE) |&gt; head(10)  \n#&gt;            d_bar         d_clinic        d_doctors      d_houseware \n#&gt;        0.5838896        0.5032500        0.3976487        0.3057273 \n#&gt;         d_beauty         d_lawyer d_post_secondary       d_hospital \n#&gt;        0.3045807        0.2755247        0.2529872        0.2350196 \n#&gt;    d_post_office     d_veterinary \n#&gt;        0.2126038        0.1822459\nvar$cos2[,4] |&gt; sort(TRUE) |&gt; head(10)  \n#&gt;  d_post_depot      d_garage  d_grave_yard d_post_office   d_warehouse \n#&gt;     0.3513015     0.2819908     0.2446533     0.2428260     0.2081000 \n#&gt;    d_car_wash         d_car      d_beauty         d_bar     d_clothes \n#&gt;     0.1999892     0.1985806     0.1963524     0.1873405     0.1509097\nvar$cos2[,5] |&gt; sort(TRUE) |&gt; head(10)  \n#&gt;                d_hospital              d_grave_yard                  d_beauty \n#&gt;                 0.4127392                 0.3755168                 0.2679848 \n#&gt;                  d_clinic         d_social_facility                d_pharmacy \n#&gt;                 0.1781904                 0.1581253                 0.1509858 \n#&gt;             d_hairdresser d_money_exchange_transfer          d_post_secondary \n#&gt;                 0.1442135                 0.1281109                 0.1110545 \n#&gt;                d_car_wash \n#&gt;                 0.1098951\nvar$cos2[,6] |&gt; sort(TRUE) |&gt; head(10)  \n#&gt; d_community_centre           d_school           d_bakery  d_bicycle_parking \n#&gt;         0.36015734         0.30625585         0.17513813         0.16631827 \n#&gt;             d_bank          d_parking         d_computer d_place_of_worship \n#&gt;         0.12257184         0.11784405         0.11540551         0.10354087 \n#&gt;           d_garage          d_clothes \n#&gt;         0.08017703         0.05695278\nvar$cos2[,7] |&gt; sort(TRUE) |&gt; head(10)  \n#&gt;          d_library          d_dentist             d_bank d_charging_station \n#&gt;         0.25247987         0.19841238         0.18195028         0.13519759 \n#&gt;             d_park              d_car      d_convenience           d_clinic \n#&gt;         0.11153897         0.09188295         0.08246889         0.07974623 \n#&gt;     d_estate_agent          d_toilets \n#&gt;         0.06939298         0.06842670\n\n\n\n\nCode\n#--Dimension 1 \nfactoextra::fviz_contrib(x_train_pca, \"var\", axes = 1, top = 10) \n\n\n\n\n\n\n\n\n\nDistance to nearest car repair shop, electronics, money exchange and transfer, garagaes, vertinary, houseware, gas stations (fuel), liquor shop (alcohol), warehouse and laundry contributed most to the construction of first dimension. Although there is a variation in type of places, it appears that the first component primarily captures outskirts.\n\n\nCode\n#--Dimension 2\nfactoextra::fviz_contrib(x_train_pca, \"var\", axes = 2, top = 10)\n\n\n\n\n\n\n\n\n\nMain drivers of the second component were vicnity to bakery, bank, clothes, lawyer’s office, bridge, real estate agent, post-secondary institution (e.g., college or university), ATM machines, post office and convenience store. We can safely say the second dimension best represents high streets.\n\n\nCode\n#--Dimension 3\nfactoextra::fviz_contrib(x_train_pca, \"var\", axes = 3, top = 10)\n\n\n\n\n\n\n\n\n\nDistance to nearest bar, clinic, doctor’s office, houseware shop, aesthetics shop (beauty), lawyer’s office, post-secondary institution, hospital, post office and veterinary clinic was most pivotal in the formation of third dimension. Although there is a variation in the type of places, third dimension can be summarised as healthcare settings.\n\n\nCode\n#--Dimension 4\nfactoextra::fviz_contrib(x_train_pca, \"var\", axes = 4, top = 10)\n\n\n\n\n\n\n\n\n\nCode\nfactoextra::fviz_contrib(x_train_pca, \"var\", axes = 5, top = 10)\n\n\n\n\n\n\n\n\n\nCode\nfactoextra::fviz_contrib(x_train_pca, \"var\", axes = 6, top = 10)\n\n\n\n\n\n\n\n\n\nCode\nfactoextra::fviz_contrib(x_train_pca, \"var\", axes = 7, top = 10)\n\n\n\n\n\n\n\n\n\nThe"
  },
  {
    "objectID": "dist/fin/limitation.html",
    "href": "dist/fin/limitation.html",
    "title": "Limitation",
    "section": "",
    "text": "Data Quality\n\nBiased patterns in patrol\nTendency to be more crimes near police station"
  },
  {
    "objectID": "dist/fin/index.html",
    "href": "dist/fin/index.html",
    "title": "ARC-LBB",
    "section": "",
    "text": "This is a website for ARC-LBB (Assessing the Risk of Crime in London Borough of Barnet) project, which was completed in part of the Data Science Accelerator programme by Office for National Statistics.\n\n\n\n\n\n\n“Cognitivie behaviour therapy (CBT) for individuals to prevent crimes has shown to be less effective in countries with higher level of socioeconomic inequality like UK compared to countries with lesser inequality like Canada.” - Crime Surveys User Conference (2024)"
  },
  {
    "objectID": "dist/fin/eda.html",
    "href": "dist/fin/eda.html",
    "title": "EDA",
    "section": "",
    "text": "Code\n#--Install / load packages\nrm(list = ls())\npacman::p_load(sf, here, tmap, osmdata, tidyverse, data.table, rio, tidyverse, flextable, mapview, units, spdep, deldir, sp, rgeoda, leaflet, viridis, crosstalk, leaflet.extras, plotly)\n\n#--Import street-level crime data\ncrime &lt;- rio::import(here::here(\"3_output\", \"crime_2024-05-09.csv\")) |&gt;\n    dplyr::mutate(category = stringr::str_replace_all(category, \"-\", \" \")) |&gt;\n    sf::st_as_sf(coords = c(\"location.longitude\", \"location.latitude\"), crs = 4326, dim = \"XY\") \n    #from 2021-04 to 2024-03\n\n#--Import Barnet shapefile\nbnt_shp &lt;- sf::st_read(here(\"1_data\", \"9_geo\", \"bnt_lad.json\"), crs = 4326, quiet = TRUE) |&gt;\n  st_make_valid()\n\n#--Get bounding box \nbb &lt;- st_bbox(bnt_shp) \n\n#--Filter crime that intersects or is in within Barnet file\n#crime_bnt &lt;- crime[which(st_covers(bnt_shp, crime, sparse = FALSE)),]\ncrime_bnt &lt;- crime[which(st_intersects(bnt_shp, crime, sparse = FALSE)),]\n\n#--Amend date column\ncrime_bnt$date &lt;- as.Date(paste0(crime_bnt$month, \"-01\"))\n\n#--Create shared_data\nshared_data &lt;- SharedData$new(crime_bnt)"
  },
  {
    "objectID": "dist/fin/eda.html#set-up",
    "href": "dist/fin/eda.html#set-up",
    "title": "EDA",
    "section": "",
    "text": "Code\n#--Install / load packages\nrm(list = ls())\npacman::p_load(sf, here, tmap, osmdata, tidyverse, data.table, rio, tidyverse, flextable, mapview, units, spdep, deldir, sp, rgeoda, leaflet, viridis, crosstalk, leaflet.extras, plotly)\n\n#--Import street-level crime data\ncrime &lt;- rio::import(here::here(\"3_output\", \"crime_2024-05-09.csv\")) |&gt;\n    dplyr::mutate(category = stringr::str_replace_all(category, \"-\", \" \")) |&gt;\n    sf::st_as_sf(coords = c(\"location.longitude\", \"location.latitude\"), crs = 4326, dim = \"XY\") \n    #from 2021-04 to 2024-03\n\n#--Import Barnet shapefile\nbnt_shp &lt;- sf::st_read(here(\"1_data\", \"9_geo\", \"bnt_lad.json\"), crs = 4326, quiet = TRUE) |&gt;\n  st_make_valid()\n\n#--Get bounding box \nbb &lt;- st_bbox(bnt_shp) \n\n#--Filter crime that intersects or is in within Barnet file\n#crime_bnt &lt;- crime[which(st_covers(bnt_shp, crime, sparse = FALSE)),]\ncrime_bnt &lt;- crime[which(st_intersects(bnt_shp, crime, sparse = FALSE)),]\n\n#--Amend date column\ncrime_bnt$date &lt;- as.Date(paste0(crime_bnt$month, \"-01\"))\n\n#--Create shared_data\nshared_data &lt;- SharedData$new(crime_bnt)"
  },
  {
    "objectID": "dist/fin/eda.html#spatio-temporal-distribution-of-crimes-by-category",
    "href": "dist/fin/eda.html#spatio-temporal-distribution-of-crimes-by-category",
    "title": "EDA",
    "section": "Spatio-Temporal Distribution of Crimes by Category",
    "text": "Spatio-Temporal Distribution of Crimes by Category\n\nMap by Category\n\n\nCode\n#--Assign colour palette\nn_pal &lt;- length(unique(crime_bnt$category))\ncrime_pal &lt;- leaflet::colorFactor(turbo(n_pal), crime_bnt$category)\n\n#--Create filters\nmonth_slider &lt;- crosstalk::filter_slider(\"date\", \"Date\", shared_data, ~date, width = \"100%\")\ncategory_checkbox &lt;- crosstalk::filter_checkbox(\"category\", \"Category\", shared_data, ~category)\n\n#--Create map\nm_eda &lt;- leaflet(shared_data) |&gt;\n  leaflet::addProviderTiles(\"CartoDB.Positron\")|&gt;\n  leaflet::addCircleMarkers(color = ~crime_pal(category), radius = 2) |&gt;\n  leaflet::addLegend(\"bottomright\", pal = crime_pal, values = ~category, title = \"Category\")\n\n#--Pull everything together\ncrosstalk::bscols(\n  widths = c(12, 3, 9),\n  month_slider,\n  category_checkbox,\n  m_eda\n)\n\n\n\n\n\n\nDate\n\n\n\n\n\n\nCategory\n\n\n\n\nanti social behaviour\n\n\n\n\n\nbicycle theft\n\n\n\n\n\nburglary\n\n\n\n\n\ncriminal damage arson\n\n\n\n\n\ndrugs\n\n\n\n\n\nother crime\n\n\n\n\n\nother theft\n\n\n\n\n\npossession of weapons\n\n\n\n\n\npublic order\n\n\n\n\n\nrobbery\n\n\n\n\n\nshoplifting\n\n\n\n\n\ntheft from the person\n\n\n\n\n\nvehicle crime\n\n\n\n\n\nviolent crime\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrend by Category\n\n\nCode\n#--Create timeseries data by category\nct_crime &lt;- crime_bnt |&gt;\n    st_drop_geometry() |&gt;\n    group_by(category, date) |&gt;\n    tally() |&gt;\n    arrange(desc(n))\n\n#--Create shared_data\nshared_data_ct &lt;- SharedData$new(ct_crime)\n\n#--Create filter\nmonth_slider_ct &lt;- crosstalk::filter_slider(\"date\", \"Date\", shared_data_ct, ~date, step = 1, width = \"100%\")\n\n#--Trend plot\npl_trend &lt;- plotly::plot_ly(shared_data_ct, x = ~date, y = ~n, color = ~category, colors = viridis_pal(option = \"H\")(14)) |&gt;\n  plotly::add_lines() |&gt;\n  plotly::layout(xaxis = list(title = \"\"),\n                 yaxis = list(title = \"Number of Crimes\\n\"))\n\n#--Pull everything together\ncrosstalk::bscols(\n  widths = c(12, 12),\n  month_slider_ct,\n  pl_trend\n)\n\n\n\n\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverall Frequency\n\nIn the last three years\n\n\nCode\n#--Create count data by category\nct_crime2 &lt;- crime_bnt |&gt;\n    st_drop_geometry() |&gt;\n    group_by(category) |&gt;\n    tally() |&gt;\n    arrange(desc(n)) \n\n#--Frequency plot\npl_freq &lt;- plot_ly(ct_crime2, x = ~stats::reorder(category, n, decreasing = TRUE), y = ~n, color = ~category, colors = viridis_pal(option = \"H\")(14)) |&gt;\n  plotly::add_bars()|&gt;\n  plotly::layout(xaxis = list(title = \"\"),\n                 yaxis = list(title = \"Number of Crimes\\n\"))\n\npl_freq\n\n\n\n\n\n\n\n\nIn the last 12 months\n\n\nCode\n#--Create count data by category in the last 12 months\nct_crime3 &lt;- crime_bnt |&gt;\n    st_drop_geometry() |&gt;\n    filter(date &gt;= ymd(\"2023-04-01\")) |&gt;\n    group_by(category) |&gt;\n    tally() |&gt;\n    arrange(desc(n)) \n\n#--Frequency plot\npl_freq2 &lt;- plot_ly(ct_crime3, x = ~stats::reorder(category, n, decreasing = TRUE), y = ~n, color = ~category, colors = viridis_pal(option = \"H\")(14)) |&gt;\n  plotly::add_bars()|&gt;\n  plotly::layout(xaxis = list(title = \"\"),\n                 yaxis = list(title = \"Number of Crimes\\n\"))\n\npl_freq2"
  },
  {
    "objectID": "dist/fin/about.html",
    "href": "dist/fin/about.html",
    "title": "About",
    "section": "",
    "text": "Data Sourcing\n\nPolice\nOpen Street Map\n\nData Processing\nEDA\nAutocorrelation\n\nGlobal\nLocal\n\nKriging\nPCA\nMultivariate Kriging\n\nModel Evaluation\n\nGeographically Weighted Regression\n\nModel Evaluation"
  },
  {
    "objectID": "dist/2_script/crime_eda.html#crime-by-frequency",
    "href": "dist/2_script/crime_eda.html#crime-by-frequency",
    "title": "Crime EDA",
    "section": "Crime by Frequency",
    "text": "Crime by Frequency\n\nMost Prevalent Crimes in Barnet All-Time\n\nAnti-social behaviour, violent crime, other theft, vehicle crime, and theft from the person were the five most prevalent crimes.\n\n\n\nMost Prevalent Crime in Barnet in the Last 12 Months\nInterestingly, in the last 12 months, the number of violent crimes exceeded that of anti-social behaviour. They were followed by vehicle crime, other theft and burglary."
  },
  {
    "objectID": "dist/2_script/crime_eda.html#source-places",
    "href": "dist/2_script/crime_eda.html#source-places",
    "title": "Crime EDA",
    "section": "Source Places",
    "text": "Source Places"
  },
  {
    "objectID": "dist/2_script/crime_eda.html#count-the-number-of-crimes-and-places-within-each-grid",
    "href": "dist/2_script/crime_eda.html#count-the-number-of-crimes-and-places-within-each-grid",
    "title": "Crime EDA",
    "section": "Count the Number of Crimes and Places within Each Grid",
    "text": "Count the Number of Crimes and Places within Each Grid\n\nCreate Grid\nUnless specified otherwise, cellsize in st_make_grid() is c(diff(st_bbox(x)[c(1, 3)]), diff(st_bbox(x)[c(2, 4)]))/n, where n = c(10, 10).\n\n\nSelect necessary columns\n\n\nCount the Number"
  },
  {
    "objectID": "dist/2_script/crime_eda.html#spatial-autocorrelation",
    "href": "dist/2_script/crime_eda.html#spatial-autocorrelation",
    "title": "Crime EDA",
    "section": "Spatial Autocorrelation",
    "text": "Spatial Autocorrelation\n\nSubset Crime Data\n\n\nCreate Distance-Based Weight\n\n\nCount the Number of Neighbouring Points of Each Crime Point\n\n\nGlobal Autocorrelation Test\n\n\nLocal Autocorrelation Test\n\n\nGeneric function for analysing SPAC\n\nApply to Crime\n\n\nApply to POI\n\n\n\nKriging"
  },
  {
    "objectID": "dist/0_ref/osm_amenity_list.html",
    "href": "dist/0_ref/osm_amenity_list.html",
    "title": "ARC-LBB",
    "section": "",
    "text": "List of values for the amenity key in OpenStreetMap:\n\nSustenance\n\nbar\nbiergarten\ncafe\nfast_food\nfood_court\nice_cream\npub\nrestaurant\n\n\n\nEducation\n\ncollege\ndancing_school\ndriving_school\nfirst_aid_school\nkindergarten\nlanguage_school\nlibrary\nsurf_school\ntoy_library\nresearch_institute\ntraining\nmusic_school\nschool\ntraffic_park\nuniversity\n\n\n\nTransportation\n\nbicycle_parking\nbicycle_repair_station\nbicycle_rental\nbicycle_wash\nboat_rental\nboat_sharing\nbus_station\ncar_rental\ncar_sharing\ncar_wash\ncompressed_air\nvehicle_inspection\ncharging_station\ndriver_training\nferry_terminal\nfuel\ngrit_bin\nmotorcycle_parking\nparking\nparking_entrance\nparking_space\ntaxi\nweighbridge\n\n\n\nFinancial\n\natm\npayment_terminal\nbank\nbureau_de_change\nmoney_transfer\npayment_centre\n\n\n\nHealthcare\n\nbaby_hatch\nclinic\ndentist\ndoctors\nhospital\nnursing_home\npharmacy\nsocial_facility\nveterinary\n\n\n\nEntertainment, Arts & Culture\n\narts_centre\nbrothel\ncasino\ncinema\ncommunity_centre\nconference_centre\nevents_venue\nexhibition_centre\nfountain\ngambling\nlove_hotel\nmusic_venue\nnightclub\nplanetarium\npublic_bookcase\nsocial_centre\nstage\nstripclub\nstudio\nswingerclub\ntheatre\n\n\n\nPublic Service\n\ncourthouse\nfire_station\npolice\npost_box\npost_depot\npost_office\nprison\nranger_station\ntownhall\n\n\n\nFacilities\n\nbbq\nbench\ndog_toilet\ndressing_room\ndrinking_water\ngive_box\nmailroom\nparcel_locker\nshelter\nshower\ntelephone\ntoilets\nwater_point\nwatering_place\n\n\n\nWaste Management\n\nsanitary_dump_station\nrecycling\nwaste_basket\nwaste_disposal\nwaste_transfer_station\n\n\n\nOthers\n\nanimal_boarding\nanimal_breeding\nanimal_shelter\nanimal_training\nbaking_oven\nclock\ncrematorium\ndive_centre\nfuneral_hall\ngrave_yard\nhunting_stand\ninternet_cafe\nkitchen\nkneipp_water_cure\nlounger\nmarketplace\nmonastery\nmortuary\nphoto_booth\nplace_of_mourning\nplace_of_worship\npublic_bath\npublic_building\nrefugee_site\nvending_machine\nuser_defined"
  },
  {
    "objectID": "dist/0_ref/ref_for_lisa.html",
    "href": "dist/0_ref/ref_for_lisa.html",
    "title": "ARC-LBB",
    "section": "",
    "text": "https://crd230.github.io/lab7.html"
  },
  {
    "objectID": "dist/2_script/pca_test_train_ex.html",
    "href": "dist/2_script/pca_test_train_ex.html",
    "title": "ARC-LBB",
    "section": "",
    "text": "import numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\n\n\n# Load iris dataset as an example\niris = load_iris()\nX = iris.data\ny = iris.target\n\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\n# Standardize the data (important for PCA)\nscaler = StandardScaler()\nX_train_std = scaler.fit_transform(X_train)\nX_test_std = scaler.transform(X_test)\n\n\n# Apply PCA\npca = PCA()\nX_train_pca = pca.fit_transform(X_train_std)\n\n\n# Calculate the cumulative explained variance\ncumulative_variance_ratio = np.cumsum(pca.explained_variance_ratio_)\n\ncumulative_variance_ratio\n\narray([0.72551423, 0.95552345, 0.99513118, 1.        ])\n\n\n\n# Determine the number of components to keep for 85% variance explained\nn_components = np.argmax(cumulative_variance_ratio &gt;= 0.85) + 1\n\n\n# Apply PCA with the selected number of components\npca = PCA(n_components=n_components)\nX_train_pca = pca.fit_transform(X_train_std)\nX_test_pca = pca.transform(X_test_std)\n\n\n# Display the results\nprint(\"Original Training Data Shape:\", X_train.shape)\nprint(\"Reduced Training Data Shape (PCA):\", X_train_pca.shape)\nprint(\"Number of Components Selected:\", n_components)\n\nOriginal Training Data Shape: (120, 4)\nReduced Training Data Shape (PCA): (120, 2)\nNumber of Components Selected: 2"
  }
]